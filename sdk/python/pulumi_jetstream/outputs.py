# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'StreamMirror',
    'StreamMirrorExternal',
    'StreamMirrorSubjectTransform',
    'StreamSource',
    'StreamSourceExternal',
    'StreamSourceSubjectTransform',
    'StreamSubjectTransform',
]

@pulumi.output_type
class StreamMirror(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterSubject":
            suggest = "filter_subject"
        elif key == "startSeq":
            suggest = "start_seq"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "subjectTransforms":
            suggest = "subject_transforms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamMirror. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamMirror.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamMirror.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 external: Optional['outputs.StreamMirrorExternal'] = None,
                 filter_subject: Optional[str] = None,
                 start_seq: Optional[int] = None,
                 start_time: Optional[str] = None,
                 subject_transforms: Optional[Sequence['outputs.StreamMirrorSubjectTransform']] = None):
        """
        :param str name: The name of the source Stream
        :param 'StreamMirrorExternalArgs' external: Streams replicated from other accounts
        :param str filter_subject: Only copy messages matching a specific subject, not usable for mirrors
        :param int start_seq: The sequence to start mirroring from
        :param str start_time: The time stamp in the source stream to start from, in RFC3339 format
        :param Sequence['StreamMirrorSubjectTransformArgs'] subject_transforms: The subject filtering sources and associated destination transforms
        """
        pulumi.set(__self__, "name", name)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if filter_subject is not None:
            pulumi.set(__self__, "filter_subject", filter_subject)
        if start_seq is not None:
            pulumi.set(__self__, "start_seq", start_seq)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if subject_transforms is not None:
            pulumi.set(__self__, "subject_transforms", subject_transforms)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the source Stream
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def external(self) -> Optional['outputs.StreamMirrorExternal']:
        """
        Streams replicated from other accounts
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> Optional[str]:
        """
        Only copy messages matching a specific subject, not usable for mirrors
        """
        return pulumi.get(self, "filter_subject")

    @property
    @pulumi.getter(name="startSeq")
    def start_seq(self) -> Optional[int]:
        """
        The sequence to start mirroring from
        """
        return pulumi.get(self, "start_seq")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The time stamp in the source stream to start from, in RFC3339 format
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="subjectTransforms")
    def subject_transforms(self) -> Optional[Sequence['outputs.StreamMirrorSubjectTransform']]:
        """
        The subject filtering sources and associated destination transforms
        """
        return pulumi.get(self, "subject_transforms")


@pulumi.output_type
class StreamMirrorExternal(dict):
    def __init__(__self__, *,
                 api: Optional[str] = None,
                 deliver: Optional[str] = None):
        """
        :param str api: The subject prefix for the remote API
        :param str deliver: The subject prefix where messages will be delivered to
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if deliver is not None:
            pulumi.set(__self__, "deliver", deliver)

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The subject prefix for the remote API
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def deliver(self) -> Optional[str]:
        """
        The subject prefix where messages will be delivered to
        """
        return pulumi.get(self, "deliver")


@pulumi.output_type
class StreamMirrorSubjectTransform(dict):
    def __init__(__self__, *,
                 destination: str,
                 source: str):
        """
        :param str destination: The subject transform destination
        :param str source: The subject transform source
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        The subject transform destination
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        The subject transform source
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class StreamSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterSubject":
            suggest = "filter_subject"
        elif key == "startSeq":
            suggest = "start_seq"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "subjectTransforms":
            suggest = "subject_transforms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StreamSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StreamSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StreamSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 external: Optional['outputs.StreamSourceExternal'] = None,
                 filter_subject: Optional[str] = None,
                 start_seq: Optional[int] = None,
                 start_time: Optional[str] = None,
                 subject_transforms: Optional[Sequence['outputs.StreamSourceSubjectTransform']] = None):
        """
        :param str name: The name of the source Stream
        :param 'StreamSourceExternalArgs' external: Streams replicated from other accounts
        :param str filter_subject: Only copy messages matching a specific subject, not usable for mirrors
        :param int start_seq: The sequence to start mirroring from
        :param str start_time: The time stamp in the source stream to start from, in RFC3339 format
        :param Sequence['StreamSourceSubjectTransformArgs'] subject_transforms: The subject filtering sources and associated destination transforms
        """
        pulumi.set(__self__, "name", name)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if filter_subject is not None:
            pulumi.set(__self__, "filter_subject", filter_subject)
        if start_seq is not None:
            pulumi.set(__self__, "start_seq", start_seq)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if subject_transforms is not None:
            pulumi.set(__self__, "subject_transforms", subject_transforms)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the source Stream
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def external(self) -> Optional['outputs.StreamSourceExternal']:
        """
        Streams replicated from other accounts
        """
        return pulumi.get(self, "external")

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> Optional[str]:
        """
        Only copy messages matching a specific subject, not usable for mirrors
        """
        return pulumi.get(self, "filter_subject")

    @property
    @pulumi.getter(name="startSeq")
    def start_seq(self) -> Optional[int]:
        """
        The sequence to start mirroring from
        """
        return pulumi.get(self, "start_seq")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        """
        The time stamp in the source stream to start from, in RFC3339 format
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="subjectTransforms")
    def subject_transforms(self) -> Optional[Sequence['outputs.StreamSourceSubjectTransform']]:
        """
        The subject filtering sources and associated destination transforms
        """
        return pulumi.get(self, "subject_transforms")


@pulumi.output_type
class StreamSourceExternal(dict):
    def __init__(__self__, *,
                 api: Optional[str] = None,
                 deliver: Optional[str] = None):
        """
        :param str api: The subject prefix for the remote API
        :param str deliver: The subject prefix where messages will be delivered to
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if deliver is not None:
            pulumi.set(__self__, "deliver", deliver)

    @property
    @pulumi.getter
    def api(self) -> Optional[str]:
        """
        The subject prefix for the remote API
        """
        return pulumi.get(self, "api")

    @property
    @pulumi.getter
    def deliver(self) -> Optional[str]:
        """
        The subject prefix where messages will be delivered to
        """
        return pulumi.get(self, "deliver")


@pulumi.output_type
class StreamSourceSubjectTransform(dict):
    def __init__(__self__, *,
                 destination: str,
                 source: str):
        """
        :param str destination: The subject transform destination
        :param str source: The subject transform source
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        The subject transform destination
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        The subject transform source
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class StreamSubjectTransform(dict):
    def __init__(__self__, *,
                 destination: str,
                 source: str):
        """
        :param str destination: The subject transform destination
        :param str source: The subject transform source
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> str:
        """
        The subject transform destination
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        The subject transform source
        """
        return pulumi.get(self, "source")


