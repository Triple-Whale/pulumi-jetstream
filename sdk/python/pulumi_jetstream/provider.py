# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 servers: pulumi.Input[str],
                 credential_data: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 nkey: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input['ProviderTlsArgs']] = None,
                 user: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] servers: Comma separated list of NATS servers to connect to
        :param pulumi.Input[str] credential_data: The contents of the NATS 2.0 Credentials file to use
        :param pulumi.Input[str] credentials: Path to the NATS 2.0 credentials file to use for authentication
        :param pulumi.Input[str] nkey: Connect using a NKEY seed stored in a file
        :param pulumi.Input[str] password: Connect using a password
        :param pulumi.Input[str] user: Connect using an username, used as token when no password is given
        """
        pulumi.set(__self__, "servers", servers)
        if credential_data is not None:
            pulumi.set(__self__, "credential_data", credential_data)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if nkey is not None:
            pulumi.set(__self__, "nkey", nkey)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Input[str]:
        """
        Comma separated list of NATS servers to connect to
        """
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: pulumi.Input[str]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="credentialData")
    def credential_data(self) -> Optional[pulumi.Input[str]]:
        """
        The contents of the NATS 2.0 Credentials file to use
        """
        return pulumi.get(self, "credential_data")

    @credential_data.setter
    def credential_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_data", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the NATS 2.0 credentials file to use for authentication
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def nkey(self) -> Optional[pulumi.Input[str]]:
        """
        Connect using a NKEY seed stored in a file
        """
        return pulumi.get(self, "nkey")

    @nkey.setter
    def nkey(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nkey", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Connect using a password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def tls(self) -> Optional[pulumi.Input['ProviderTlsArgs']]:
        return pulumi.get(self, "tls")

    @tls.setter
    def tls(self, value: Optional[pulumi.Input['ProviderTlsArgs']]):
        pulumi.set(self, "tls", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        """
        Connect using an username, used as token when no password is given
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_data: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 nkey: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[pulumi.InputType['ProviderTlsArgs']]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the jetstream package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_data: The contents of the NATS 2.0 Credentials file to use
        :param pulumi.Input[str] credentials: Path to the NATS 2.0 credentials file to use for authentication
        :param pulumi.Input[str] nkey: Connect using a NKEY seed stored in a file
        :param pulumi.Input[str] password: Connect using a password
        :param pulumi.Input[str] servers: Comma separated list of NATS servers to connect to
        :param pulumi.Input[str] user: Connect using an username, used as token when no password is given
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the jetstream package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_data: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 nkey: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 servers: Optional[pulumi.Input[str]] = None,
                 tls: Optional[pulumi.Input[pulumi.InputType['ProviderTlsArgs']]] = None,
                 user: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["credential_data"] = credential_data
            __props__.__dict__["credentials"] = credentials
            __props__.__dict__["nkey"] = nkey
            __props__.__dict__["password"] = password
            if servers is None and not opts.urn:
                raise TypeError("Missing required property 'servers'")
            __props__.__dict__["servers"] = servers
            __props__.__dict__["tls"] = pulumi.Output.from_input(tls).apply(pulumi.runtime.to_json) if tls is not None else None
            __props__.__dict__["user"] = user
        super(Provider, __self__).__init__(
            'jetstream',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="credentialData")
    def credential_data(self) -> pulumi.Output[Optional[str]]:
        """
        The contents of the NATS 2.0 Credentials file to use
        """
        return pulumi.get(self, "credential_data")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Optional[str]]:
        """
        Path to the NATS 2.0 credentials file to use for authentication
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def nkey(self) -> pulumi.Output[Optional[str]]:
        """
        Connect using a NKEY seed stored in a file
        """
        return pulumi.get(self, "nkey")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Connect using a password
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[str]:
        """
        Comma separated list of NATS servers to connect to
        """
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[Optional[str]]:
        """
        Connect using an username, used as token when no password is given
        """
        return pulumi.get(self, "user")

