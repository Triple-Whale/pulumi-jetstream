# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ProviderTlsArgs',
    'StreamMirrorArgs',
    'StreamMirrorExternalArgs',
    'StreamMirrorSubjectTransformArgs',
    'StreamSourceArgs',
    'StreamSourceExternalArgs',
    'StreamSourceSubjectTransformArgs',
    'StreamSubjectTransformArgs',
]

@pulumi.input_type
class ProviderTlsArgs:
    def __init__(__self__, *,
                 ca_file: Optional[pulumi.Input[str]] = None,
                 ca_file_data: Optional[pulumi.Input[str]] = None,
                 cert_file: Optional[pulumi.Input[str]] = None,
                 cert_file_data: Optional[pulumi.Input[str]] = None,
                 key_file: Optional[pulumi.Input[str]] = None,
                 key_file_data: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ca_file: Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
        :param pulumi.Input[str] ca_file_data: The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
        :param pulumi.Input[str] cert_file: Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
        :param pulumi.Input[str] cert_file_data: The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
        :param pulumi.Input[str] key_file: Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
        :param pulumi.Input[str] key_file_data: The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
        """
        if ca_file is not None:
            pulumi.set(__self__, "ca_file", ca_file)
        if ca_file_data is not None:
            pulumi.set(__self__, "ca_file_data", ca_file_data)
        if cert_file is not None:
            pulumi.set(__self__, "cert_file", cert_file)
        if cert_file_data is not None:
            pulumi.set(__self__, "cert_file_data", cert_file_data)
        if key_file is not None:
            pulumi.set(__self__, "key_file", key_file)
        if key_file_data is not None:
            pulumi.set(__self__, "key_file_data", key_file_data)

    @property
    @pulumi.getter(name="caFile")
    def ca_file(self) -> Optional[pulumi.Input[str]]:
        """
        Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
        """
        return pulumi.get(self, "ca_file")

    @ca_file.setter
    def ca_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_file", value)

    @property
    @pulumi.getter(name="caFileData")
    def ca_file_data(self) -> Optional[pulumi.Input[str]]:
        """
        The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
        """
        return pulumi.get(self, "ca_file_data")

    @ca_file_data.setter
    def ca_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_file_data", value)

    @property
    @pulumi.getter(name="certFile")
    def cert_file(self) -> Optional[pulumi.Input[str]]:
        """
        Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
        """
        return pulumi.get(self, "cert_file")

    @cert_file.setter
    def cert_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_file", value)

    @property
    @pulumi.getter(name="certFileData")
    def cert_file_data(self) -> Optional[pulumi.Input[str]]:
        """
        The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
        """
        return pulumi.get(self, "cert_file_data")

    @cert_file_data.setter
    def cert_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_file_data", value)

    @property
    @pulumi.getter(name="keyFile")
    def key_file(self) -> Optional[pulumi.Input[str]]:
        """
        Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
        """
        return pulumi.get(self, "key_file")

    @key_file.setter
    def key_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_file", value)

    @property
    @pulumi.getter(name="keyFileData")
    def key_file_data(self) -> Optional[pulumi.Input[str]]:
        """
        The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
        """
        return pulumi.get(self, "key_file_data")

    @key_file_data.setter
    def key_file_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_file_data", value)


@pulumi.input_type
class StreamMirrorArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 external: Optional[pulumi.Input['StreamMirrorExternalArgs']] = None,
                 filter_subject: Optional[pulumi.Input[str]] = None,
                 start_seq: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 subject_transforms: Optional[pulumi.Input[Sequence[pulumi.Input['StreamMirrorSubjectTransformArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The name of the source Stream
        :param pulumi.Input['StreamMirrorExternalArgs'] external: Streams replicated from other accounts
        :param pulumi.Input[str] filter_subject: Only copy messages matching a specific subject, not usable for mirrors
        :param pulumi.Input[int] start_seq: The sequence to start mirroring from
        :param pulumi.Input[str] start_time: The time stamp in the source stream to start from, in RFC3339 format
        :param pulumi.Input[Sequence[pulumi.Input['StreamMirrorSubjectTransformArgs']]] subject_transforms: The subject filtering sources and associated destination transforms
        """
        pulumi.set(__self__, "name", name)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if filter_subject is not None:
            pulumi.set(__self__, "filter_subject", filter_subject)
        if start_seq is not None:
            pulumi.set(__self__, "start_seq", start_seq)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if subject_transforms is not None:
            pulumi.set(__self__, "subject_transforms", subject_transforms)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the source Stream
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input['StreamMirrorExternalArgs']]:
        """
        Streams replicated from other accounts
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input['StreamMirrorExternalArgs']]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> Optional[pulumi.Input[str]]:
        """
        Only copy messages matching a specific subject, not usable for mirrors
        """
        return pulumi.get(self, "filter_subject")

    @filter_subject.setter
    def filter_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_subject", value)

    @property
    @pulumi.getter(name="startSeq")
    def start_seq(self) -> Optional[pulumi.Input[int]]:
        """
        The sequence to start mirroring from
        """
        return pulumi.get(self, "start_seq")

    @start_seq.setter
    def start_seq(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_seq", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time stamp in the source stream to start from, in RFC3339 format
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="subjectTransforms")
    def subject_transforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StreamMirrorSubjectTransformArgs']]]]:
        """
        The subject filtering sources and associated destination transforms
        """
        return pulumi.get(self, "subject_transforms")

    @subject_transforms.setter
    def subject_transforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StreamMirrorSubjectTransformArgs']]]]):
        pulumi.set(self, "subject_transforms", value)


@pulumi.input_type
class StreamMirrorExternalArgs:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input[str]] = None,
                 deliver: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api: The subject prefix for the remote API
        :param pulumi.Input[str] deliver: The subject prefix where messages will be delivered to
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if deliver is not None:
            pulumi.set(__self__, "deliver", deliver)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        """
        The subject prefix for the remote API
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def deliver(self) -> Optional[pulumi.Input[str]]:
        """
        The subject prefix where messages will be delivered to
        """
        return pulumi.get(self, "deliver")

    @deliver.setter
    def deliver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deliver", value)


@pulumi.input_type
class StreamMirrorSubjectTransformArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 source: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination: The subject transform destination
        :param pulumi.Input[str] source: The subject transform source
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The subject transform destination
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The subject transform source
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class StreamSourceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 external: Optional[pulumi.Input['StreamSourceExternalArgs']] = None,
                 filter_subject: Optional[pulumi.Input[str]] = None,
                 start_seq: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 subject_transforms: Optional[pulumi.Input[Sequence[pulumi.Input['StreamSourceSubjectTransformArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The name of the source Stream
        :param pulumi.Input['StreamSourceExternalArgs'] external: Streams replicated from other accounts
        :param pulumi.Input[str] filter_subject: Only copy messages matching a specific subject, not usable for mirrors
        :param pulumi.Input[int] start_seq: The sequence to start mirroring from
        :param pulumi.Input[str] start_time: The time stamp in the source stream to start from, in RFC3339 format
        :param pulumi.Input[Sequence[pulumi.Input['StreamSourceSubjectTransformArgs']]] subject_transforms: The subject filtering sources and associated destination transforms
        """
        pulumi.set(__self__, "name", name)
        if external is not None:
            pulumi.set(__self__, "external", external)
        if filter_subject is not None:
            pulumi.set(__self__, "filter_subject", filter_subject)
        if start_seq is not None:
            pulumi.set(__self__, "start_seq", start_seq)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if subject_transforms is not None:
            pulumi.set(__self__, "subject_transforms", subject_transforms)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the source Stream
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def external(self) -> Optional[pulumi.Input['StreamSourceExternalArgs']]:
        """
        Streams replicated from other accounts
        """
        return pulumi.get(self, "external")

    @external.setter
    def external(self, value: Optional[pulumi.Input['StreamSourceExternalArgs']]):
        pulumi.set(self, "external", value)

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> Optional[pulumi.Input[str]]:
        """
        Only copy messages matching a specific subject, not usable for mirrors
        """
        return pulumi.get(self, "filter_subject")

    @filter_subject.setter
    def filter_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_subject", value)

    @property
    @pulumi.getter(name="startSeq")
    def start_seq(self) -> Optional[pulumi.Input[int]]:
        """
        The sequence to start mirroring from
        """
        return pulumi.get(self, "start_seq")

    @start_seq.setter
    def start_seq(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_seq", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time stamp in the source stream to start from, in RFC3339 format
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="subjectTransforms")
    def subject_transforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StreamSourceSubjectTransformArgs']]]]:
        """
        The subject filtering sources and associated destination transforms
        """
        return pulumi.get(self, "subject_transforms")

    @subject_transforms.setter
    def subject_transforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StreamSourceSubjectTransformArgs']]]]):
        pulumi.set(self, "subject_transforms", value)


@pulumi.input_type
class StreamSourceExternalArgs:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input[str]] = None,
                 deliver: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api: The subject prefix for the remote API
        :param pulumi.Input[str] deliver: The subject prefix where messages will be delivered to
        """
        if api is not None:
            pulumi.set(__self__, "api", api)
        if deliver is not None:
            pulumi.set(__self__, "deliver", deliver)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        """
        The subject prefix for the remote API
        """
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)

    @property
    @pulumi.getter
    def deliver(self) -> Optional[pulumi.Input[str]]:
        """
        The subject prefix where messages will be delivered to
        """
        return pulumi.get(self, "deliver")

    @deliver.setter
    def deliver(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deliver", value)


@pulumi.input_type
class StreamSourceSubjectTransformArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 source: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination: The subject transform destination
        :param pulumi.Input[str] source: The subject transform source
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The subject transform destination
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The subject transform source
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)


@pulumi.input_type
class StreamSubjectTransformArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 source: pulumi.Input[str]):
        """
        :param pulumi.Input[str] destination: The subject transform destination
        :param pulumi.Input[str] source: The subject transform source
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        """
        The subject transform destination
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The subject transform source
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)


