# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ConsumerArgs', 'Consumer']

@pulumi.input_type
class ConsumerArgs:
    def __init__(__self__, *,
                 durable_name: pulumi.Input[str],
                 stream_id: pulumi.Input[str],
                 ack_policy: Optional[pulumi.Input[str]] = None,
                 ack_wait: Optional[pulumi.Input[int]] = None,
                 backoffs: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 deliver_all: Optional[pulumi.Input[bool]] = None,
                 deliver_last: Optional[pulumi.Input[bool]] = None,
                 deliver_last_per_subject: Optional[pulumi.Input[bool]] = None,
                 deliver_new: Optional[pulumi.Input[bool]] = None,
                 delivery_group: Optional[pulumi.Input[str]] = None,
                 delivery_subject: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_subject: Optional[pulumi.Input[str]] = None,
                 filter_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_control: Optional[pulumi.Input[bool]] = None,
                 headers_only: Optional[pulumi.Input[bool]] = None,
                 heartbeat: Optional[pulumi.Input[int]] = None,
                 inactive_threshold: Optional[pulumi.Input[int]] = None,
                 max_ack_pending: Optional[pulumi.Input[int]] = None,
                 max_batch: Optional[pulumi.Input[int]] = None,
                 max_bytes: Optional[pulumi.Input[int]] = None,
                 max_delivery: Optional[pulumi.Input[int]] = None,
                 max_expires: Optional[pulumi.Input[int]] = None,
                 max_waiting: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ratelimit: Optional[pulumi.Input[int]] = None,
                 replay_policy: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 sample_freq: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 stream_sequence: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Consumer resource.
        :param pulumi.Input[str] durable_name: The durable name of the Consumer
        :param pulumi.Input[str] stream_id: The name of the Stream that this consumer consumes
        :param pulumi.Input[str] ack_policy: The delivery acknowledgement policy to apply to the Consumer
        :param pulumi.Input[int] ack_wait: Number of seconds to wait for acknowledgement
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backoffs: List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        :param pulumi.Input[bool] deliver_all: Starts at the first available message in the Stream
        :param pulumi.Input[bool] deliver_last: Starts at the latest available message in the Stream
        :param pulumi.Input[bool] deliver_last_per_subject: Starts with the last message for each subject matched by filter
        :param pulumi.Input[bool] deliver_new: Starts with the next available message in the Stream
        :param pulumi.Input[str] delivery_group: When set Push consumers will only deliver messages to subscriptions with this group set
        :param pulumi.Input[str] delivery_subject: The subject where a Push-based consumer will deliver messages
        :param pulumi.Input[str] description: Contains additional information about this consumer
        :param pulumi.Input[str] filter_subject: Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_subjects: Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        :param pulumi.Input[bool] flow_control: Enable flow control for push consumers
        :param pulumi.Input[bool] headers_only: When true no message bodies will be delivered only headers
        :param pulumi.Input[int] heartbeat: Enable heartbeat messages for push consumers, duration specified in seconds
        :param pulumi.Input[int] inactive_threshold: Removes the consumer after a idle period, specified as a duration in seconds
        :param pulumi.Input[int] max_ack_pending: Maximum pending Acks before consumers are paused
        :param pulumi.Input[int] max_batch: Limits Pull Batch sizes to this maximum
        :param pulumi.Input[int] max_bytes: The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        :param pulumi.Input[int] max_delivery: Maximum deliveries to attempt for each message
        :param pulumi.Input[int] max_expires: Limits the Pull Expires duration to this maximum in seconds
        :param pulumi.Input[int] max_waiting: The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        :param pulumi.Input[bool] memory: Force the consumer state to be kept in memory rather than inherit the setting from the stream
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Free form metadata about the consumer
        :param pulumi.Input[int] ratelimit: The rate limit for delivering messages to push consumers, expressed in bits per second
        :param pulumi.Input[str] replay_policy: The rate at which messages will be replayed from the stream
        :param pulumi.Input[int] replicas: How many replicas of the data to keep in a clustered environment
        :param pulumi.Input[int] sample_freq: The percentage of acknowledgements that will be sampled for observability purposes
        :param pulumi.Input[str] start_time: The timestamp of the first message that will be delivered by this Consumer
        :param pulumi.Input[int] stream_sequence: The Stream Sequence that will be the first message delivered by this Consumer
        """
        pulumi.set(__self__, "durable_name", durable_name)
        pulumi.set(__self__, "stream_id", stream_id)
        if ack_policy is not None:
            pulumi.set(__self__, "ack_policy", ack_policy)
        if ack_wait is not None:
            pulumi.set(__self__, "ack_wait", ack_wait)
        if backoffs is not None:
            pulumi.set(__self__, "backoffs", backoffs)
        if deliver_all is not None:
            pulumi.set(__self__, "deliver_all", deliver_all)
        if deliver_last is not None:
            pulumi.set(__self__, "deliver_last", deliver_last)
        if deliver_last_per_subject is not None:
            pulumi.set(__self__, "deliver_last_per_subject", deliver_last_per_subject)
        if deliver_new is not None:
            pulumi.set(__self__, "deliver_new", deliver_new)
        if delivery_group is not None:
            pulumi.set(__self__, "delivery_group", delivery_group)
        if delivery_subject is not None:
            pulumi.set(__self__, "delivery_subject", delivery_subject)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filter_subject is not None:
            pulumi.set(__self__, "filter_subject", filter_subject)
        if filter_subjects is not None:
            pulumi.set(__self__, "filter_subjects", filter_subjects)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if headers_only is not None:
            pulumi.set(__self__, "headers_only", headers_only)
        if heartbeat is not None:
            pulumi.set(__self__, "heartbeat", heartbeat)
        if inactive_threshold is not None:
            pulumi.set(__self__, "inactive_threshold", inactive_threshold)
        if max_ack_pending is not None:
            pulumi.set(__self__, "max_ack_pending", max_ack_pending)
        if max_batch is not None:
            pulumi.set(__self__, "max_batch", max_batch)
        if max_bytes is not None:
            pulumi.set(__self__, "max_bytes", max_bytes)
        if max_delivery is not None:
            pulumi.set(__self__, "max_delivery", max_delivery)
        if max_expires is not None:
            pulumi.set(__self__, "max_expires", max_expires)
        if max_waiting is not None:
            pulumi.set(__self__, "max_waiting", max_waiting)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ratelimit is not None:
            pulumi.set(__self__, "ratelimit", ratelimit)
        if replay_policy is not None:
            pulumi.set(__self__, "replay_policy", replay_policy)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if sample_freq is not None:
            pulumi.set(__self__, "sample_freq", sample_freq)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if stream_sequence is not None:
            pulumi.set(__self__, "stream_sequence", stream_sequence)

    @property
    @pulumi.getter(name="durableName")
    def durable_name(self) -> pulumi.Input[str]:
        """
        The durable name of the Consumer
        """
        return pulumi.get(self, "durable_name")

    @durable_name.setter
    def durable_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "durable_name", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Input[str]:
        """
        The name of the Stream that this consumer consumes
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter(name="ackPolicy")
    def ack_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The delivery acknowledgement policy to apply to the Consumer
        """
        return pulumi.get(self, "ack_policy")

    @ack_policy.setter
    def ack_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_policy", value)

    @property
    @pulumi.getter(name="ackWait")
    def ack_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to wait for acknowledgement
        """
        return pulumi.get(self, "ack_wait")

    @ack_wait.setter
    def ack_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_wait", value)

    @property
    @pulumi.getter
    def backoffs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        """
        return pulumi.get(self, "backoffs")

    @backoffs.setter
    def backoffs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "backoffs", value)

    @property
    @pulumi.getter(name="deliverAll")
    def deliver_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts at the first available message in the Stream
        """
        return pulumi.get(self, "deliver_all")

    @deliver_all.setter
    def deliver_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_all", value)

    @property
    @pulumi.getter(name="deliverLast")
    def deliver_last(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts at the latest available message in the Stream
        """
        return pulumi.get(self, "deliver_last")

    @deliver_last.setter
    def deliver_last(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_last", value)

    @property
    @pulumi.getter(name="deliverLastPerSubject")
    def deliver_last_per_subject(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts with the last message for each subject matched by filter
        """
        return pulumi.get(self, "deliver_last_per_subject")

    @deliver_last_per_subject.setter
    def deliver_last_per_subject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_last_per_subject", value)

    @property
    @pulumi.getter(name="deliverNew")
    def deliver_new(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts with the next available message in the Stream
        """
        return pulumi.get(self, "deliver_new")

    @deliver_new.setter
    def deliver_new(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_new", value)

    @property
    @pulumi.getter(name="deliveryGroup")
    def delivery_group(self) -> Optional[pulumi.Input[str]]:
        """
        When set Push consumers will only deliver messages to subscriptions with this group set
        """
        return pulumi.get(self, "delivery_group")

    @delivery_group.setter
    def delivery_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_group", value)

    @property
    @pulumi.getter(name="deliverySubject")
    def delivery_subject(self) -> Optional[pulumi.Input[str]]:
        """
        The subject where a Push-based consumer will deliver messages
        """
        return pulumi.get(self, "delivery_subject")

    @delivery_subject.setter
    def delivery_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_subject", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Contains additional information about this consumer
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> Optional[pulumi.Input[str]]:
        """
        Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        """
        return pulumi.get(self, "filter_subject")

    @filter_subject.setter
    def filter_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_subject", value)

    @property
    @pulumi.getter(name="filterSubjects")
    def filter_subjects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        """
        return pulumi.get(self, "filter_subjects")

    @filter_subjects.setter
    def filter_subjects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_subjects", value)

    @property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable flow control for push consumers
        """
        return pulumi.get(self, "flow_control")

    @flow_control.setter
    def flow_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flow_control", value)

    @property
    @pulumi.getter(name="headersOnly")
    def headers_only(self) -> Optional[pulumi.Input[bool]]:
        """
        When true no message bodies will be delivered only headers
        """
        return pulumi.get(self, "headers_only")

    @headers_only.setter
    def headers_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "headers_only", value)

    @property
    @pulumi.getter
    def heartbeat(self) -> Optional[pulumi.Input[int]]:
        """
        Enable heartbeat messages for push consumers, duration specified in seconds
        """
        return pulumi.get(self, "heartbeat")

    @heartbeat.setter
    def heartbeat(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "heartbeat", value)

    @property
    @pulumi.getter(name="inactiveThreshold")
    def inactive_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Removes the consumer after a idle period, specified as a duration in seconds
        """
        return pulumi.get(self, "inactive_threshold")

    @inactive_threshold.setter
    def inactive_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_threshold", value)

    @property
    @pulumi.getter(name="maxAckPending")
    def max_ack_pending(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum pending Acks before consumers are paused
        """
        return pulumi.get(self, "max_ack_pending")

    @max_ack_pending.setter
    def max_ack_pending(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_pending", value)

    @property
    @pulumi.getter(name="maxBatch")
    def max_batch(self) -> Optional[pulumi.Input[int]]:
        """
        Limits Pull Batch sizes to this maximum
        """
        return pulumi.get(self, "max_batch")

    @max_batch.setter
    def max_batch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch", value)

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        """
        return pulumi.get(self, "max_bytes")

    @max_bytes.setter
    def max_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bytes", value)

    @property
    @pulumi.getter(name="maxDelivery")
    def max_delivery(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum deliveries to attempt for each message
        """
        return pulumi.get(self, "max_delivery")

    @max_delivery.setter
    def max_delivery(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_delivery", value)

    @property
    @pulumi.getter(name="maxExpires")
    def max_expires(self) -> Optional[pulumi.Input[int]]:
        """
        Limits the Pull Expires duration to this maximum in seconds
        """
        return pulumi.get(self, "max_expires")

    @max_expires.setter
    def max_expires(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_expires", value)

    @property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> Optional[pulumi.Input[int]]:
        """
        The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        """
        return pulumi.get(self, "max_waiting")

    @max_waiting.setter
    def max_waiting(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_waiting", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[bool]]:
        """
        Force the consumer state to be kept in memory rather than inherit the setting from the stream
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Free form metadata about the consumer
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ratelimit(self) -> Optional[pulumi.Input[int]]:
        """
        The rate limit for delivering messages to push consumers, expressed in bits per second
        """
        return pulumi.get(self, "ratelimit")

    @ratelimit.setter
    def ratelimit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ratelimit", value)

    @property
    @pulumi.getter(name="replayPolicy")
    def replay_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The rate at which messages will be replayed from the stream
        """
        return pulumi.get(self, "replay_policy")

    @replay_policy.setter
    def replay_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replay_policy", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        How many replicas of the data to keep in a clustered environment
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="sampleFreq")
    def sample_freq(self) -> Optional[pulumi.Input[int]]:
        """
        The percentage of acknowledgements that will be sampled for observability purposes
        """
        return pulumi.get(self, "sample_freq")

    @sample_freq.setter
    def sample_freq(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_freq", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of the first message that will be delivered by this Consumer
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="streamSequence")
    def stream_sequence(self) -> Optional[pulumi.Input[int]]:
        """
        The Stream Sequence that will be the first message delivered by this Consumer
        """
        return pulumi.get(self, "stream_sequence")

    @stream_sequence.setter
    def stream_sequence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_sequence", value)


@pulumi.input_type
class _ConsumerState:
    def __init__(__self__, *,
                 ack_policy: Optional[pulumi.Input[str]] = None,
                 ack_wait: Optional[pulumi.Input[int]] = None,
                 backoffs: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 deliver_all: Optional[pulumi.Input[bool]] = None,
                 deliver_last: Optional[pulumi.Input[bool]] = None,
                 deliver_last_per_subject: Optional[pulumi.Input[bool]] = None,
                 deliver_new: Optional[pulumi.Input[bool]] = None,
                 delivery_group: Optional[pulumi.Input[str]] = None,
                 delivery_subject: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 durable_name: Optional[pulumi.Input[str]] = None,
                 filter_subject: Optional[pulumi.Input[str]] = None,
                 filter_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_control: Optional[pulumi.Input[bool]] = None,
                 headers_only: Optional[pulumi.Input[bool]] = None,
                 heartbeat: Optional[pulumi.Input[int]] = None,
                 inactive_threshold: Optional[pulumi.Input[int]] = None,
                 max_ack_pending: Optional[pulumi.Input[int]] = None,
                 max_batch: Optional[pulumi.Input[int]] = None,
                 max_bytes: Optional[pulumi.Input[int]] = None,
                 max_delivery: Optional[pulumi.Input[int]] = None,
                 max_expires: Optional[pulumi.Input[int]] = None,
                 max_waiting: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ratelimit: Optional[pulumi.Input[int]] = None,
                 replay_policy: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 sample_freq: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 stream_sequence: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Consumer resources.
        :param pulumi.Input[str] ack_policy: The delivery acknowledgement policy to apply to the Consumer
        :param pulumi.Input[int] ack_wait: Number of seconds to wait for acknowledgement
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backoffs: List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        :param pulumi.Input[bool] deliver_all: Starts at the first available message in the Stream
        :param pulumi.Input[bool] deliver_last: Starts at the latest available message in the Stream
        :param pulumi.Input[bool] deliver_last_per_subject: Starts with the last message for each subject matched by filter
        :param pulumi.Input[bool] deliver_new: Starts with the next available message in the Stream
        :param pulumi.Input[str] delivery_group: When set Push consumers will only deliver messages to subscriptions with this group set
        :param pulumi.Input[str] delivery_subject: The subject where a Push-based consumer will deliver messages
        :param pulumi.Input[str] description: Contains additional information about this consumer
        :param pulumi.Input[str] durable_name: The durable name of the Consumer
        :param pulumi.Input[str] filter_subject: Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_subjects: Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        :param pulumi.Input[bool] flow_control: Enable flow control for push consumers
        :param pulumi.Input[bool] headers_only: When true no message bodies will be delivered only headers
        :param pulumi.Input[int] heartbeat: Enable heartbeat messages for push consumers, duration specified in seconds
        :param pulumi.Input[int] inactive_threshold: Removes the consumer after a idle period, specified as a duration in seconds
        :param pulumi.Input[int] max_ack_pending: Maximum pending Acks before consumers are paused
        :param pulumi.Input[int] max_batch: Limits Pull Batch sizes to this maximum
        :param pulumi.Input[int] max_bytes: The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        :param pulumi.Input[int] max_delivery: Maximum deliveries to attempt for each message
        :param pulumi.Input[int] max_expires: Limits the Pull Expires duration to this maximum in seconds
        :param pulumi.Input[int] max_waiting: The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        :param pulumi.Input[bool] memory: Force the consumer state to be kept in memory rather than inherit the setting from the stream
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Free form metadata about the consumer
        :param pulumi.Input[int] ratelimit: The rate limit for delivering messages to push consumers, expressed in bits per second
        :param pulumi.Input[str] replay_policy: The rate at which messages will be replayed from the stream
        :param pulumi.Input[int] replicas: How many replicas of the data to keep in a clustered environment
        :param pulumi.Input[int] sample_freq: The percentage of acknowledgements that will be sampled for observability purposes
        :param pulumi.Input[str] start_time: The timestamp of the first message that will be delivered by this Consumer
        :param pulumi.Input[str] stream_id: The name of the Stream that this consumer consumes
        :param pulumi.Input[int] stream_sequence: The Stream Sequence that will be the first message delivered by this Consumer
        """
        if ack_policy is not None:
            pulumi.set(__self__, "ack_policy", ack_policy)
        if ack_wait is not None:
            pulumi.set(__self__, "ack_wait", ack_wait)
        if backoffs is not None:
            pulumi.set(__self__, "backoffs", backoffs)
        if deliver_all is not None:
            pulumi.set(__self__, "deliver_all", deliver_all)
        if deliver_last is not None:
            pulumi.set(__self__, "deliver_last", deliver_last)
        if deliver_last_per_subject is not None:
            pulumi.set(__self__, "deliver_last_per_subject", deliver_last_per_subject)
        if deliver_new is not None:
            pulumi.set(__self__, "deliver_new", deliver_new)
        if delivery_group is not None:
            pulumi.set(__self__, "delivery_group", delivery_group)
        if delivery_subject is not None:
            pulumi.set(__self__, "delivery_subject", delivery_subject)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if durable_name is not None:
            pulumi.set(__self__, "durable_name", durable_name)
        if filter_subject is not None:
            pulumi.set(__self__, "filter_subject", filter_subject)
        if filter_subjects is not None:
            pulumi.set(__self__, "filter_subjects", filter_subjects)
        if flow_control is not None:
            pulumi.set(__self__, "flow_control", flow_control)
        if headers_only is not None:
            pulumi.set(__self__, "headers_only", headers_only)
        if heartbeat is not None:
            pulumi.set(__self__, "heartbeat", heartbeat)
        if inactive_threshold is not None:
            pulumi.set(__self__, "inactive_threshold", inactive_threshold)
        if max_ack_pending is not None:
            pulumi.set(__self__, "max_ack_pending", max_ack_pending)
        if max_batch is not None:
            pulumi.set(__self__, "max_batch", max_batch)
        if max_bytes is not None:
            pulumi.set(__self__, "max_bytes", max_bytes)
        if max_delivery is not None:
            pulumi.set(__self__, "max_delivery", max_delivery)
        if max_expires is not None:
            pulumi.set(__self__, "max_expires", max_expires)
        if max_waiting is not None:
            pulumi.set(__self__, "max_waiting", max_waiting)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if ratelimit is not None:
            pulumi.set(__self__, "ratelimit", ratelimit)
        if replay_policy is not None:
            pulumi.set(__self__, "replay_policy", replay_policy)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if sample_freq is not None:
            pulumi.set(__self__, "sample_freq", sample_freq)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if stream_sequence is not None:
            pulumi.set(__self__, "stream_sequence", stream_sequence)

    @property
    @pulumi.getter(name="ackPolicy")
    def ack_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The delivery acknowledgement policy to apply to the Consumer
        """
        return pulumi.get(self, "ack_policy")

    @ack_policy.setter
    def ack_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ack_policy", value)

    @property
    @pulumi.getter(name="ackWait")
    def ack_wait(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to wait for acknowledgement
        """
        return pulumi.get(self, "ack_wait")

    @ack_wait.setter
    def ack_wait(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ack_wait", value)

    @property
    @pulumi.getter
    def backoffs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        """
        return pulumi.get(self, "backoffs")

    @backoffs.setter
    def backoffs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "backoffs", value)

    @property
    @pulumi.getter(name="deliverAll")
    def deliver_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts at the first available message in the Stream
        """
        return pulumi.get(self, "deliver_all")

    @deliver_all.setter
    def deliver_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_all", value)

    @property
    @pulumi.getter(name="deliverLast")
    def deliver_last(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts at the latest available message in the Stream
        """
        return pulumi.get(self, "deliver_last")

    @deliver_last.setter
    def deliver_last(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_last", value)

    @property
    @pulumi.getter(name="deliverLastPerSubject")
    def deliver_last_per_subject(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts with the last message for each subject matched by filter
        """
        return pulumi.get(self, "deliver_last_per_subject")

    @deliver_last_per_subject.setter
    def deliver_last_per_subject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_last_per_subject", value)

    @property
    @pulumi.getter(name="deliverNew")
    def deliver_new(self) -> Optional[pulumi.Input[bool]]:
        """
        Starts with the next available message in the Stream
        """
        return pulumi.get(self, "deliver_new")

    @deliver_new.setter
    def deliver_new(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deliver_new", value)

    @property
    @pulumi.getter(name="deliveryGroup")
    def delivery_group(self) -> Optional[pulumi.Input[str]]:
        """
        When set Push consumers will only deliver messages to subscriptions with this group set
        """
        return pulumi.get(self, "delivery_group")

    @delivery_group.setter
    def delivery_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_group", value)

    @property
    @pulumi.getter(name="deliverySubject")
    def delivery_subject(self) -> Optional[pulumi.Input[str]]:
        """
        The subject where a Push-based consumer will deliver messages
        """
        return pulumi.get(self, "delivery_subject")

    @delivery_subject.setter
    def delivery_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_subject", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Contains additional information about this consumer
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="durableName")
    def durable_name(self) -> Optional[pulumi.Input[str]]:
        """
        The durable name of the Consumer
        """
        return pulumi.get(self, "durable_name")

    @durable_name.setter
    def durable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "durable_name", value)

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> Optional[pulumi.Input[str]]:
        """
        Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        """
        return pulumi.get(self, "filter_subject")

    @filter_subject.setter
    def filter_subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_subject", value)

    @property
    @pulumi.getter(name="filterSubjects")
    def filter_subjects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        """
        return pulumi.get(self, "filter_subjects")

    @filter_subjects.setter
    def filter_subjects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_subjects", value)

    @property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable flow control for push consumers
        """
        return pulumi.get(self, "flow_control")

    @flow_control.setter
    def flow_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "flow_control", value)

    @property
    @pulumi.getter(name="headersOnly")
    def headers_only(self) -> Optional[pulumi.Input[bool]]:
        """
        When true no message bodies will be delivered only headers
        """
        return pulumi.get(self, "headers_only")

    @headers_only.setter
    def headers_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "headers_only", value)

    @property
    @pulumi.getter
    def heartbeat(self) -> Optional[pulumi.Input[int]]:
        """
        Enable heartbeat messages for push consumers, duration specified in seconds
        """
        return pulumi.get(self, "heartbeat")

    @heartbeat.setter
    def heartbeat(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "heartbeat", value)

    @property
    @pulumi.getter(name="inactiveThreshold")
    def inactive_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Removes the consumer after a idle period, specified as a duration in seconds
        """
        return pulumi.get(self, "inactive_threshold")

    @inactive_threshold.setter
    def inactive_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "inactive_threshold", value)

    @property
    @pulumi.getter(name="maxAckPending")
    def max_ack_pending(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum pending Acks before consumers are paused
        """
        return pulumi.get(self, "max_ack_pending")

    @max_ack_pending.setter
    def max_ack_pending(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_ack_pending", value)

    @property
    @pulumi.getter(name="maxBatch")
    def max_batch(self) -> Optional[pulumi.Input[int]]:
        """
        Limits Pull Batch sizes to this maximum
        """
        return pulumi.get(self, "max_batch")

    @max_batch.setter
    def max_batch(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch", value)

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        """
        return pulumi.get(self, "max_bytes")

    @max_bytes.setter
    def max_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bytes", value)

    @property
    @pulumi.getter(name="maxDelivery")
    def max_delivery(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum deliveries to attempt for each message
        """
        return pulumi.get(self, "max_delivery")

    @max_delivery.setter
    def max_delivery(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_delivery", value)

    @property
    @pulumi.getter(name="maxExpires")
    def max_expires(self) -> Optional[pulumi.Input[int]]:
        """
        Limits the Pull Expires duration to this maximum in seconds
        """
        return pulumi.get(self, "max_expires")

    @max_expires.setter
    def max_expires(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_expires", value)

    @property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> Optional[pulumi.Input[int]]:
        """
        The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        """
        return pulumi.get(self, "max_waiting")

    @max_waiting.setter
    def max_waiting(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_waiting", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[bool]]:
        """
        Force the consumer state to be kept in memory rather than inherit the setting from the stream
        """
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Free form metadata about the consumer
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def ratelimit(self) -> Optional[pulumi.Input[int]]:
        """
        The rate limit for delivering messages to push consumers, expressed in bits per second
        """
        return pulumi.get(self, "ratelimit")

    @ratelimit.setter
    def ratelimit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ratelimit", value)

    @property
    @pulumi.getter(name="replayPolicy")
    def replay_policy(self) -> Optional[pulumi.Input[str]]:
        """
        The rate at which messages will be replayed from the stream
        """
        return pulumi.get(self, "replay_policy")

    @replay_policy.setter
    def replay_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replay_policy", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        How many replicas of the data to keep in a clustered environment
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter(name="sampleFreq")
    def sample_freq(self) -> Optional[pulumi.Input[int]]:
        """
        The percentage of acknowledgements that will be sampled for observability purposes
        """
        return pulumi.get(self, "sample_freq")

    @sample_freq.setter
    def sample_freq(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sample_freq", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        """
        The timestamp of the first message that will be delivered by this Consumer
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Stream that this consumer consumes
        """
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stream_id", value)

    @property
    @pulumi.getter(name="streamSequence")
    def stream_sequence(self) -> Optional[pulumi.Input[int]]:
        """
        The Stream Sequence that will be the first message delivered by this Consumer
        """
        return pulumi.get(self, "stream_sequence")

    @stream_sequence.setter
    def stream_sequence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_sequence", value)


class Consumer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ack_policy: Optional[pulumi.Input[str]] = None,
                 ack_wait: Optional[pulumi.Input[int]] = None,
                 backoffs: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 deliver_all: Optional[pulumi.Input[bool]] = None,
                 deliver_last: Optional[pulumi.Input[bool]] = None,
                 deliver_last_per_subject: Optional[pulumi.Input[bool]] = None,
                 deliver_new: Optional[pulumi.Input[bool]] = None,
                 delivery_group: Optional[pulumi.Input[str]] = None,
                 delivery_subject: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 durable_name: Optional[pulumi.Input[str]] = None,
                 filter_subject: Optional[pulumi.Input[str]] = None,
                 filter_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_control: Optional[pulumi.Input[bool]] = None,
                 headers_only: Optional[pulumi.Input[bool]] = None,
                 heartbeat: Optional[pulumi.Input[int]] = None,
                 inactive_threshold: Optional[pulumi.Input[int]] = None,
                 max_ack_pending: Optional[pulumi.Input[int]] = None,
                 max_batch: Optional[pulumi.Input[int]] = None,
                 max_bytes: Optional[pulumi.Input[int]] = None,
                 max_delivery: Optional[pulumi.Input[int]] = None,
                 max_expires: Optional[pulumi.Input[int]] = None,
                 max_waiting: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ratelimit: Optional[pulumi.Input[int]] = None,
                 replay_policy: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 sample_freq: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 stream_sequence: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Consumer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ack_policy: The delivery acknowledgement policy to apply to the Consumer
        :param pulumi.Input[int] ack_wait: Number of seconds to wait for acknowledgement
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backoffs: List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        :param pulumi.Input[bool] deliver_all: Starts at the first available message in the Stream
        :param pulumi.Input[bool] deliver_last: Starts at the latest available message in the Stream
        :param pulumi.Input[bool] deliver_last_per_subject: Starts with the last message for each subject matched by filter
        :param pulumi.Input[bool] deliver_new: Starts with the next available message in the Stream
        :param pulumi.Input[str] delivery_group: When set Push consumers will only deliver messages to subscriptions with this group set
        :param pulumi.Input[str] delivery_subject: The subject where a Push-based consumer will deliver messages
        :param pulumi.Input[str] description: Contains additional information about this consumer
        :param pulumi.Input[str] durable_name: The durable name of the Consumer
        :param pulumi.Input[str] filter_subject: Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_subjects: Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        :param pulumi.Input[bool] flow_control: Enable flow control for push consumers
        :param pulumi.Input[bool] headers_only: When true no message bodies will be delivered only headers
        :param pulumi.Input[int] heartbeat: Enable heartbeat messages for push consumers, duration specified in seconds
        :param pulumi.Input[int] inactive_threshold: Removes the consumer after a idle period, specified as a duration in seconds
        :param pulumi.Input[int] max_ack_pending: Maximum pending Acks before consumers are paused
        :param pulumi.Input[int] max_batch: Limits Pull Batch sizes to this maximum
        :param pulumi.Input[int] max_bytes: The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        :param pulumi.Input[int] max_delivery: Maximum deliveries to attempt for each message
        :param pulumi.Input[int] max_expires: Limits the Pull Expires duration to this maximum in seconds
        :param pulumi.Input[int] max_waiting: The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        :param pulumi.Input[bool] memory: Force the consumer state to be kept in memory rather than inherit the setting from the stream
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Free form metadata about the consumer
        :param pulumi.Input[int] ratelimit: The rate limit for delivering messages to push consumers, expressed in bits per second
        :param pulumi.Input[str] replay_policy: The rate at which messages will be replayed from the stream
        :param pulumi.Input[int] replicas: How many replicas of the data to keep in a clustered environment
        :param pulumi.Input[int] sample_freq: The percentage of acknowledgements that will be sampled for observability purposes
        :param pulumi.Input[str] start_time: The timestamp of the first message that will be delivered by this Consumer
        :param pulumi.Input[str] stream_id: The name of the Stream that this consumer consumes
        :param pulumi.Input[int] stream_sequence: The Stream Sequence that will be the first message delivered by this Consumer
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConsumerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Consumer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConsumerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConsumerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ack_policy: Optional[pulumi.Input[str]] = None,
                 ack_wait: Optional[pulumi.Input[int]] = None,
                 backoffs: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 deliver_all: Optional[pulumi.Input[bool]] = None,
                 deliver_last: Optional[pulumi.Input[bool]] = None,
                 deliver_last_per_subject: Optional[pulumi.Input[bool]] = None,
                 deliver_new: Optional[pulumi.Input[bool]] = None,
                 delivery_group: Optional[pulumi.Input[str]] = None,
                 delivery_subject: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 durable_name: Optional[pulumi.Input[str]] = None,
                 filter_subject: Optional[pulumi.Input[str]] = None,
                 filter_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 flow_control: Optional[pulumi.Input[bool]] = None,
                 headers_only: Optional[pulumi.Input[bool]] = None,
                 heartbeat: Optional[pulumi.Input[int]] = None,
                 inactive_threshold: Optional[pulumi.Input[int]] = None,
                 max_ack_pending: Optional[pulumi.Input[int]] = None,
                 max_batch: Optional[pulumi.Input[int]] = None,
                 max_bytes: Optional[pulumi.Input[int]] = None,
                 max_delivery: Optional[pulumi.Input[int]] = None,
                 max_expires: Optional[pulumi.Input[int]] = None,
                 max_waiting: Optional[pulumi.Input[int]] = None,
                 memory: Optional[pulumi.Input[bool]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ratelimit: Optional[pulumi.Input[int]] = None,
                 replay_policy: Optional[pulumi.Input[str]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 sample_freq: Optional[pulumi.Input[int]] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 stream_id: Optional[pulumi.Input[str]] = None,
                 stream_sequence: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConsumerArgs.__new__(ConsumerArgs)

            __props__.__dict__["ack_policy"] = ack_policy
            __props__.__dict__["ack_wait"] = ack_wait
            __props__.__dict__["backoffs"] = backoffs
            __props__.__dict__["deliver_all"] = deliver_all
            __props__.__dict__["deliver_last"] = deliver_last
            __props__.__dict__["deliver_last_per_subject"] = deliver_last_per_subject
            __props__.__dict__["deliver_new"] = deliver_new
            __props__.__dict__["delivery_group"] = delivery_group
            __props__.__dict__["delivery_subject"] = delivery_subject
            __props__.__dict__["description"] = description
            if durable_name is None and not opts.urn:
                raise TypeError("Missing required property 'durable_name'")
            __props__.__dict__["durable_name"] = durable_name
            __props__.__dict__["filter_subject"] = filter_subject
            __props__.__dict__["filter_subjects"] = filter_subjects
            __props__.__dict__["flow_control"] = flow_control
            __props__.__dict__["headers_only"] = headers_only
            __props__.__dict__["heartbeat"] = heartbeat
            __props__.__dict__["inactive_threshold"] = inactive_threshold
            __props__.__dict__["max_ack_pending"] = max_ack_pending
            __props__.__dict__["max_batch"] = max_batch
            __props__.__dict__["max_bytes"] = max_bytes
            __props__.__dict__["max_delivery"] = max_delivery
            __props__.__dict__["max_expires"] = max_expires
            __props__.__dict__["max_waiting"] = max_waiting
            __props__.__dict__["memory"] = memory
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["ratelimit"] = ratelimit
            __props__.__dict__["replay_policy"] = replay_policy
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["sample_freq"] = sample_freq
            __props__.__dict__["start_time"] = start_time
            if stream_id is None and not opts.urn:
                raise TypeError("Missing required property 'stream_id'")
            __props__.__dict__["stream_id"] = stream_id
            __props__.__dict__["stream_sequence"] = stream_sequence
        super(Consumer, __self__).__init__(
            'jetstream:index/consumer:Consumer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ack_policy: Optional[pulumi.Input[str]] = None,
            ack_wait: Optional[pulumi.Input[int]] = None,
            backoffs: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            deliver_all: Optional[pulumi.Input[bool]] = None,
            deliver_last: Optional[pulumi.Input[bool]] = None,
            deliver_last_per_subject: Optional[pulumi.Input[bool]] = None,
            deliver_new: Optional[pulumi.Input[bool]] = None,
            delivery_group: Optional[pulumi.Input[str]] = None,
            delivery_subject: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            durable_name: Optional[pulumi.Input[str]] = None,
            filter_subject: Optional[pulumi.Input[str]] = None,
            filter_subjects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            flow_control: Optional[pulumi.Input[bool]] = None,
            headers_only: Optional[pulumi.Input[bool]] = None,
            heartbeat: Optional[pulumi.Input[int]] = None,
            inactive_threshold: Optional[pulumi.Input[int]] = None,
            max_ack_pending: Optional[pulumi.Input[int]] = None,
            max_batch: Optional[pulumi.Input[int]] = None,
            max_bytes: Optional[pulumi.Input[int]] = None,
            max_delivery: Optional[pulumi.Input[int]] = None,
            max_expires: Optional[pulumi.Input[int]] = None,
            max_waiting: Optional[pulumi.Input[int]] = None,
            memory: Optional[pulumi.Input[bool]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            ratelimit: Optional[pulumi.Input[int]] = None,
            replay_policy: Optional[pulumi.Input[str]] = None,
            replicas: Optional[pulumi.Input[int]] = None,
            sample_freq: Optional[pulumi.Input[int]] = None,
            start_time: Optional[pulumi.Input[str]] = None,
            stream_id: Optional[pulumi.Input[str]] = None,
            stream_sequence: Optional[pulumi.Input[int]] = None) -> 'Consumer':
        """
        Get an existing Consumer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ack_policy: The delivery acknowledgement policy to apply to the Consumer
        :param pulumi.Input[int] ack_wait: Number of seconds to wait for acknowledgement
        :param pulumi.Input[Sequence[pulumi.Input[int]]] backoffs: List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        :param pulumi.Input[bool] deliver_all: Starts at the first available message in the Stream
        :param pulumi.Input[bool] deliver_last: Starts at the latest available message in the Stream
        :param pulumi.Input[bool] deliver_last_per_subject: Starts with the last message for each subject matched by filter
        :param pulumi.Input[bool] deliver_new: Starts with the next available message in the Stream
        :param pulumi.Input[str] delivery_group: When set Push consumers will only deliver messages to subscriptions with this group set
        :param pulumi.Input[str] delivery_subject: The subject where a Push-based consumer will deliver messages
        :param pulumi.Input[str] description: Contains additional information about this consumer
        :param pulumi.Input[str] durable_name: The durable name of the Consumer
        :param pulumi.Input[str] filter_subject: Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_subjects: Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        :param pulumi.Input[bool] flow_control: Enable flow control for push consumers
        :param pulumi.Input[bool] headers_only: When true no message bodies will be delivered only headers
        :param pulumi.Input[int] heartbeat: Enable heartbeat messages for push consumers, duration specified in seconds
        :param pulumi.Input[int] inactive_threshold: Removes the consumer after a idle period, specified as a duration in seconds
        :param pulumi.Input[int] max_ack_pending: Maximum pending Acks before consumers are paused
        :param pulumi.Input[int] max_batch: Limits Pull Batch sizes to this maximum
        :param pulumi.Input[int] max_bytes: The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        :param pulumi.Input[int] max_delivery: Maximum deliveries to attempt for each message
        :param pulumi.Input[int] max_expires: Limits the Pull Expires duration to this maximum in seconds
        :param pulumi.Input[int] max_waiting: The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        :param pulumi.Input[bool] memory: Force the consumer state to be kept in memory rather than inherit the setting from the stream
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] metadata: Free form metadata about the consumer
        :param pulumi.Input[int] ratelimit: The rate limit for delivering messages to push consumers, expressed in bits per second
        :param pulumi.Input[str] replay_policy: The rate at which messages will be replayed from the stream
        :param pulumi.Input[int] replicas: How many replicas of the data to keep in a clustered environment
        :param pulumi.Input[int] sample_freq: The percentage of acknowledgements that will be sampled for observability purposes
        :param pulumi.Input[str] start_time: The timestamp of the first message that will be delivered by this Consumer
        :param pulumi.Input[str] stream_id: The name of the Stream that this consumer consumes
        :param pulumi.Input[int] stream_sequence: The Stream Sequence that will be the first message delivered by this Consumer
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ConsumerState.__new__(_ConsumerState)

        __props__.__dict__["ack_policy"] = ack_policy
        __props__.__dict__["ack_wait"] = ack_wait
        __props__.__dict__["backoffs"] = backoffs
        __props__.__dict__["deliver_all"] = deliver_all
        __props__.__dict__["deliver_last"] = deliver_last
        __props__.__dict__["deliver_last_per_subject"] = deliver_last_per_subject
        __props__.__dict__["deliver_new"] = deliver_new
        __props__.__dict__["delivery_group"] = delivery_group
        __props__.__dict__["delivery_subject"] = delivery_subject
        __props__.__dict__["description"] = description
        __props__.__dict__["durable_name"] = durable_name
        __props__.__dict__["filter_subject"] = filter_subject
        __props__.__dict__["filter_subjects"] = filter_subjects
        __props__.__dict__["flow_control"] = flow_control
        __props__.__dict__["headers_only"] = headers_only
        __props__.__dict__["heartbeat"] = heartbeat
        __props__.__dict__["inactive_threshold"] = inactive_threshold
        __props__.__dict__["max_ack_pending"] = max_ack_pending
        __props__.__dict__["max_batch"] = max_batch
        __props__.__dict__["max_bytes"] = max_bytes
        __props__.__dict__["max_delivery"] = max_delivery
        __props__.__dict__["max_expires"] = max_expires
        __props__.__dict__["max_waiting"] = max_waiting
        __props__.__dict__["memory"] = memory
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["ratelimit"] = ratelimit
        __props__.__dict__["replay_policy"] = replay_policy
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["sample_freq"] = sample_freq
        __props__.__dict__["start_time"] = start_time
        __props__.__dict__["stream_id"] = stream_id
        __props__.__dict__["stream_sequence"] = stream_sequence
        return Consumer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="ackPolicy")
    def ack_policy(self) -> pulumi.Output[Optional[str]]:
        """
        The delivery acknowledgement policy to apply to the Consumer
        """
        return pulumi.get(self, "ack_policy")

    @property
    @pulumi.getter(name="ackWait")
    def ack_wait(self) -> pulumi.Output[Optional[int]]:
        """
        Number of seconds to wait for acknowledgement
        """
        return pulumi.get(self, "ack_wait")

    @property
    @pulumi.getter
    def backoffs(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        """
        return pulumi.get(self, "backoffs")

    @property
    @pulumi.getter(name="deliverAll")
    def deliver_all(self) -> pulumi.Output[Optional[bool]]:
        """
        Starts at the first available message in the Stream
        """
        return pulumi.get(self, "deliver_all")

    @property
    @pulumi.getter(name="deliverLast")
    def deliver_last(self) -> pulumi.Output[Optional[bool]]:
        """
        Starts at the latest available message in the Stream
        """
        return pulumi.get(self, "deliver_last")

    @property
    @pulumi.getter(name="deliverLastPerSubject")
    def deliver_last_per_subject(self) -> pulumi.Output[Optional[bool]]:
        """
        Starts with the last message for each subject matched by filter
        """
        return pulumi.get(self, "deliver_last_per_subject")

    @property
    @pulumi.getter(name="deliverNew")
    def deliver_new(self) -> pulumi.Output[Optional[bool]]:
        """
        Starts with the next available message in the Stream
        """
        return pulumi.get(self, "deliver_new")

    @property
    @pulumi.getter(name="deliveryGroup")
    def delivery_group(self) -> pulumi.Output[Optional[str]]:
        """
        When set Push consumers will only deliver messages to subscriptions with this group set
        """
        return pulumi.get(self, "delivery_group")

    @property
    @pulumi.getter(name="deliverySubject")
    def delivery_subject(self) -> pulumi.Output[Optional[str]]:
        """
        The subject where a Push-based consumer will deliver messages
        """
        return pulumi.get(self, "delivery_subject")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Contains additional information about this consumer
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="durableName")
    def durable_name(self) -> pulumi.Output[str]:
        """
        The durable name of the Consumer
        """
        return pulumi.get(self, "durable_name")

    @property
    @pulumi.getter(name="filterSubject")
    def filter_subject(self) -> pulumi.Output[Optional[str]]:
        """
        Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        """
        return pulumi.get(self, "filter_subject")

    @property
    @pulumi.getter(name="filterSubjects")
    def filter_subjects(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        """
        return pulumi.get(self, "filter_subjects")

    @property
    @pulumi.getter(name="flowControl")
    def flow_control(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable flow control for push consumers
        """
        return pulumi.get(self, "flow_control")

    @property
    @pulumi.getter(name="headersOnly")
    def headers_only(self) -> pulumi.Output[Optional[bool]]:
        """
        When true no message bodies will be delivered only headers
        """
        return pulumi.get(self, "headers_only")

    @property
    @pulumi.getter
    def heartbeat(self) -> pulumi.Output[Optional[int]]:
        """
        Enable heartbeat messages for push consumers, duration specified in seconds
        """
        return pulumi.get(self, "heartbeat")

    @property
    @pulumi.getter(name="inactiveThreshold")
    def inactive_threshold(self) -> pulumi.Output[Optional[int]]:
        """
        Removes the consumer after a idle period, specified as a duration in seconds
        """
        return pulumi.get(self, "inactive_threshold")

    @property
    @pulumi.getter(name="maxAckPending")
    def max_ack_pending(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum pending Acks before consumers are paused
        """
        return pulumi.get(self, "max_ack_pending")

    @property
    @pulumi.getter(name="maxBatch")
    def max_batch(self) -> pulumi.Output[Optional[int]]:
        """
        Limits Pull Batch sizes to this maximum
        """
        return pulumi.get(self, "max_batch")

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        """
        return pulumi.get(self, "max_bytes")

    @property
    @pulumi.getter(name="maxDelivery")
    def max_delivery(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum deliveries to attempt for each message
        """
        return pulumi.get(self, "max_delivery")

    @property
    @pulumi.getter(name="maxExpires")
    def max_expires(self) -> pulumi.Output[Optional[int]]:
        """
        Limits the Pull Expires duration to this maximum in seconds
        """
        return pulumi.get(self, "max_expires")

    @property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> pulumi.Output[Optional[int]]:
        """
        The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        """
        return pulumi.get(self, "max_waiting")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional[bool]]:
        """
        Force the consumer state to be kept in memory rather than inherit the setting from the stream
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Free form metadata about the consumer
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def ratelimit(self) -> pulumi.Output[Optional[int]]:
        """
        The rate limit for delivering messages to push consumers, expressed in bits per second
        """
        return pulumi.get(self, "ratelimit")

    @property
    @pulumi.getter(name="replayPolicy")
    def replay_policy(self) -> pulumi.Output[Optional[str]]:
        """
        The rate at which messages will be replayed from the stream
        """
        return pulumi.get(self, "replay_policy")

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[Optional[int]]:
        """
        How many replicas of the data to keep in a clustered environment
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter(name="sampleFreq")
    def sample_freq(self) -> pulumi.Output[Optional[int]]:
        """
        The percentage of acknowledgements that will be sampled for observability purposes
        """
        return pulumi.get(self, "sample_freq")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Output[Optional[str]]:
        """
        The timestamp of the first message that will be delivered by this Consumer
        """
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Output[str]:
        """
        The name of the Stream that this consumer consumes
        """
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter(name="streamSequence")
    def stream_sequence(self) -> pulumi.Output[Optional[int]]:
        """
        The Stream Sequence that will be the first message delivered by this Consumer
        """
        return pulumi.get(self, "stream_sequence")

