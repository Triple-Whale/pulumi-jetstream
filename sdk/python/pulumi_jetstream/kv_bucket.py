# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['KvBucketArgs', 'KvBucket']

@pulumi.input_type
class KvBucketArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 history: Optional[pulumi.Input[int]] = None,
                 max_bucket_size: Optional[pulumi.Input[int]] = None,
                 max_value_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_cluster: Optional[pulumi.Input[str]] = None,
                 placement_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a KvBucket resource.
        :param pulumi.Input[str] description: Contains additional information about this bucket
        :param pulumi.Input[int] history: How many historical values to keep
        :param pulumi.Input[int] max_bucket_size: Maximum size of the entire bucket
        :param pulumi.Input[int] max_value_size: Maximum size of any value
        :param pulumi.Input[str] name: The name of the Bucket
        :param pulumi.Input[str] placement_cluster: Place the bucket in a specific cluster, influenced by placement_tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] placement_tags: Place the stream only on servers with these tags
        :param pulumi.Input[int] replicas: Number of cluster replicas to store
        :param pulumi.Input[int] ttl: How many seconds a value will be kept in the bucket
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if max_bucket_size is not None:
            pulumi.set(__self__, "max_bucket_size", max_bucket_size)
        if max_value_size is not None:
            pulumi.set(__self__, "max_value_size", max_value_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if placement_cluster is not None:
            pulumi.set(__self__, "placement_cluster", placement_cluster)
        if placement_tags is not None:
            pulumi.set(__self__, "placement_tags", placement_tags)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Contains additional information about this bucket
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def history(self) -> Optional[pulumi.Input[int]]:
        """
        How many historical values to keep
        """
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter(name="maxBucketSize")
    def max_bucket_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of the entire bucket
        """
        return pulumi.get(self, "max_bucket_size")

    @max_bucket_size.setter
    def max_bucket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bucket_size", value)

    @property
    @pulumi.getter(name="maxValueSize")
    def max_value_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of any value
        """
        return pulumi.get(self, "max_value_size")

    @max_value_size.setter
    def max_value_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_value_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Bucket
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="placementCluster")
    def placement_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Place the bucket in a specific cluster, influenced by placement_tags
        """
        return pulumi.get(self, "placement_cluster")

    @placement_cluster.setter
    def placement_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_cluster", value)

    @property
    @pulumi.getter(name="placementTags")
    def placement_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Place the stream only on servers with these tags
        """
        return pulumi.get(self, "placement_tags")

    @placement_tags.setter
    def placement_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "placement_tags", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cluster replicas to store
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        How many seconds a value will be kept in the bucket
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


@pulumi.input_type
class _KvBucketState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 history: Optional[pulumi.Input[int]] = None,
                 max_bucket_size: Optional[pulumi.Input[int]] = None,
                 max_value_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_cluster: Optional[pulumi.Input[str]] = None,
                 placement_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering KvBucket resources.
        :param pulumi.Input[str] description: Contains additional information about this bucket
        :param pulumi.Input[int] history: How many historical values to keep
        :param pulumi.Input[int] max_bucket_size: Maximum size of the entire bucket
        :param pulumi.Input[int] max_value_size: Maximum size of any value
        :param pulumi.Input[str] name: The name of the Bucket
        :param pulumi.Input[str] placement_cluster: Place the bucket in a specific cluster, influenced by placement_tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] placement_tags: Place the stream only on servers with these tags
        :param pulumi.Input[int] replicas: Number of cluster replicas to store
        :param pulumi.Input[int] ttl: How many seconds a value will be kept in the bucket
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if history is not None:
            pulumi.set(__self__, "history", history)
        if max_bucket_size is not None:
            pulumi.set(__self__, "max_bucket_size", max_bucket_size)
        if max_value_size is not None:
            pulumi.set(__self__, "max_value_size", max_value_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if placement_cluster is not None:
            pulumi.set(__self__, "placement_cluster", placement_cluster)
        if placement_tags is not None:
            pulumi.set(__self__, "placement_tags", placement_tags)
        if replicas is not None:
            pulumi.set(__self__, "replicas", replicas)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Contains additional information about this bucket
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def history(self) -> Optional[pulumi.Input[int]]:
        """
        How many historical values to keep
        """
        return pulumi.get(self, "history")

    @history.setter
    def history(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "history", value)

    @property
    @pulumi.getter(name="maxBucketSize")
    def max_bucket_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of the entire bucket
        """
        return pulumi.get(self, "max_bucket_size")

    @max_bucket_size.setter
    def max_bucket_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bucket_size", value)

    @property
    @pulumi.getter(name="maxValueSize")
    def max_value_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum size of any value
        """
        return pulumi.get(self, "max_value_size")

    @max_value_size.setter
    def max_value_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_value_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Bucket
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="placementCluster")
    def placement_cluster(self) -> Optional[pulumi.Input[str]]:
        """
        Place the bucket in a specific cluster, influenced by placement_tags
        """
        return pulumi.get(self, "placement_cluster")

    @placement_cluster.setter
    def placement_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_cluster", value)

    @property
    @pulumi.getter(name="placementTags")
    def placement_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Place the stream only on servers with these tags
        """
        return pulumi.get(self, "placement_tags")

    @placement_tags.setter
    def placement_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "placement_tags", value)

    @property
    @pulumi.getter
    def replicas(self) -> Optional[pulumi.Input[int]]:
        """
        Number of cluster replicas to store
        """
        return pulumi.get(self, "replicas")

    @replicas.setter
    def replicas(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "replicas", value)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[pulumi.Input[int]]:
        """
        How many seconds a value will be kept in the bucket
        """
        return pulumi.get(self, "ttl")

    @ttl.setter
    def ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl", value)


class KvBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 history: Optional[pulumi.Input[int]] = None,
                 max_bucket_size: Optional[pulumi.Input[int]] = None,
                 max_value_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_cluster: Optional[pulumi.Input[str]] = None,
                 placement_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a KvBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Contains additional information about this bucket
        :param pulumi.Input[int] history: How many historical values to keep
        :param pulumi.Input[int] max_bucket_size: Maximum size of the entire bucket
        :param pulumi.Input[int] max_value_size: Maximum size of any value
        :param pulumi.Input[str] name: The name of the Bucket
        :param pulumi.Input[str] placement_cluster: Place the bucket in a specific cluster, influenced by placement_tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] placement_tags: Place the stream only on servers with these tags
        :param pulumi.Input[int] replicas: Number of cluster replicas to store
        :param pulumi.Input[int] ttl: How many seconds a value will be kept in the bucket
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[KvBucketArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KvBucket resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KvBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KvBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 history: Optional[pulumi.Input[int]] = None,
                 max_bucket_size: Optional[pulumi.Input[int]] = None,
                 max_value_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placement_cluster: Optional[pulumi.Input[str]] = None,
                 placement_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 replicas: Optional[pulumi.Input[int]] = None,
                 ttl: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KvBucketArgs.__new__(KvBucketArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["history"] = history
            __props__.__dict__["max_bucket_size"] = max_bucket_size
            __props__.__dict__["max_value_size"] = max_value_size
            __props__.__dict__["name"] = name
            __props__.__dict__["placement_cluster"] = placement_cluster
            __props__.__dict__["placement_tags"] = placement_tags
            __props__.__dict__["replicas"] = replicas
            __props__.__dict__["ttl"] = ttl
        super(KvBucket, __self__).__init__(
            'jetstream:index/kvBucket:KvBucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            history: Optional[pulumi.Input[int]] = None,
            max_bucket_size: Optional[pulumi.Input[int]] = None,
            max_value_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            placement_cluster: Optional[pulumi.Input[str]] = None,
            placement_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            replicas: Optional[pulumi.Input[int]] = None,
            ttl: Optional[pulumi.Input[int]] = None) -> 'KvBucket':
        """
        Get an existing KvBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Contains additional information about this bucket
        :param pulumi.Input[int] history: How many historical values to keep
        :param pulumi.Input[int] max_bucket_size: Maximum size of the entire bucket
        :param pulumi.Input[int] max_value_size: Maximum size of any value
        :param pulumi.Input[str] name: The name of the Bucket
        :param pulumi.Input[str] placement_cluster: Place the bucket in a specific cluster, influenced by placement_tags
        :param pulumi.Input[Sequence[pulumi.Input[str]]] placement_tags: Place the stream only on servers with these tags
        :param pulumi.Input[int] replicas: Number of cluster replicas to store
        :param pulumi.Input[int] ttl: How many seconds a value will be kept in the bucket
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KvBucketState.__new__(_KvBucketState)

        __props__.__dict__["description"] = description
        __props__.__dict__["history"] = history
        __props__.__dict__["max_bucket_size"] = max_bucket_size
        __props__.__dict__["max_value_size"] = max_value_size
        __props__.__dict__["name"] = name
        __props__.__dict__["placement_cluster"] = placement_cluster
        __props__.__dict__["placement_tags"] = placement_tags
        __props__.__dict__["replicas"] = replicas
        __props__.__dict__["ttl"] = ttl
        return KvBucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Contains additional information about this bucket
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def history(self) -> pulumi.Output[Optional[int]]:
        """
        How many historical values to keep
        """
        return pulumi.get(self, "history")

    @property
    @pulumi.getter(name="maxBucketSize")
    def max_bucket_size(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum size of the entire bucket
        """
        return pulumi.get(self, "max_bucket_size")

    @property
    @pulumi.getter(name="maxValueSize")
    def max_value_size(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum size of any value
        """
        return pulumi.get(self, "max_value_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Bucket
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="placementCluster")
    def placement_cluster(self) -> pulumi.Output[Optional[str]]:
        """
        Place the bucket in a specific cluster, influenced by placement_tags
        """
        return pulumi.get(self, "placement_cluster")

    @property
    @pulumi.getter(name="placementTags")
    def placement_tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Place the stream only on servers with these tags
        """
        return pulumi.get(self, "placement_tags")

    @property
    @pulumi.getter
    def replicas(self) -> pulumi.Output[Optional[int]]:
        """
        Number of cluster replicas to store
        """
        return pulumi.get(self, "replicas")

    @property
    @pulumi.getter
    def ttl(self) -> pulumi.Output[Optional[int]]:
        """
        How many seconds a value will be kept in the bucket
        """
        return pulumi.get(self, "ttl")

