// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Jetstream
{
    [JetstreamResourceType("jetstream:index/consumer:Consumer")]
    public partial class Consumer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The delivery acknowledgement policy to apply to the Consumer
        /// </summary>
        [Output("ackPolicy")]
        public Output<string?> AckPolicy { get; private set; } = null!;

        /// <summary>
        /// Number of seconds to wait for acknowledgement
        /// </summary>
        [Output("ackWait")]
        public Output<int?> AckWait { get; private set; } = null!;

        /// <summary>
        /// List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        /// </summary>
        [Output("backoffs")]
        public Output<ImmutableArray<int>> Backoffs { get; private set; } = null!;

        /// <summary>
        /// Starts at the first available message in the Stream
        /// </summary>
        [Output("deliverAll")]
        public Output<bool?> DeliverAll { get; private set; } = null!;

        /// <summary>
        /// Starts at the latest available message in the Stream
        /// </summary>
        [Output("deliverLast")]
        public Output<bool?> DeliverLast { get; private set; } = null!;

        /// <summary>
        /// Starts with the last message for each subject matched by filter
        /// </summary>
        [Output("deliverLastPerSubject")]
        public Output<bool?> DeliverLastPerSubject { get; private set; } = null!;

        /// <summary>
        /// Starts with the next available message in the Stream
        /// </summary>
        [Output("deliverNew")]
        public Output<bool?> DeliverNew { get; private set; } = null!;

        /// <summary>
        /// When set Push consumers will only deliver messages to subscriptions with this group set
        /// </summary>
        [Output("deliveryGroup")]
        public Output<string?> DeliveryGroup { get; private set; } = null!;

        /// <summary>
        /// The subject where a Push-based consumer will deliver messages
        /// </summary>
        [Output("deliverySubject")]
        public Output<string?> DeliverySubject { get; private set; } = null!;

        /// <summary>
        /// Contains additional information about this consumer
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The durable name of the Consumer
        /// </summary>
        [Output("durableName")]
        public Output<string> DurableName { get; private set; } = null!;

        /// <summary>
        /// Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        /// </summary>
        [Output("filterSubject")]
        public Output<string?> FilterSubject { get; private set; } = null!;

        /// <summary>
        /// Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        /// </summary>
        [Output("filterSubjects")]
        public Output<ImmutableArray<string>> FilterSubjects { get; private set; } = null!;

        /// <summary>
        /// Enable flow control for push consumers
        /// </summary>
        [Output("flowControl")]
        public Output<bool?> FlowControl { get; private set; } = null!;

        /// <summary>
        /// When true no message bodies will be delivered only headers
        /// </summary>
        [Output("headersOnly")]
        public Output<bool?> HeadersOnly { get; private set; } = null!;

        /// <summary>
        /// Enable heartbeat messages for push consumers, duration specified in seconds
        /// </summary>
        [Output("heartbeat")]
        public Output<int?> Heartbeat { get; private set; } = null!;

        /// <summary>
        /// Removes the consumer after a idle period, specified as a duration in seconds
        /// </summary>
        [Output("inactiveThreshold")]
        public Output<int?> InactiveThreshold { get; private set; } = null!;

        /// <summary>
        /// Maximum pending Acks before consumers are paused
        /// </summary>
        [Output("maxAckPending")]
        public Output<int?> MaxAckPending { get; private set; } = null!;

        /// <summary>
        /// Limits Pull Batch sizes to this maximum
        /// </summary>
        [Output("maxBatch")]
        public Output<int?> MaxBatch { get; private set; } = null!;

        /// <summary>
        /// The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        /// </summary>
        [Output("maxBytes")]
        public Output<int?> MaxBytes { get; private set; } = null!;

        /// <summary>
        /// Maximum deliveries to attempt for each message
        /// </summary>
        [Output("maxDelivery")]
        public Output<int?> MaxDelivery { get; private set; } = null!;

        /// <summary>
        /// Limits the Pull Expires duration to this maximum in seconds
        /// </summary>
        [Output("maxExpires")]
        public Output<int?> MaxExpires { get; private set; } = null!;

        /// <summary>
        /// The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        /// </summary>
        [Output("maxWaiting")]
        public Output<int?> MaxWaiting { get; private set; } = null!;

        /// <summary>
        /// Force the consumer state to be kept in memory rather than inherit the setting from the stream
        /// </summary>
        [Output("memory")]
        public Output<bool?> Memory { get; private set; } = null!;

        /// <summary>
        /// Free form metadata about the consumer
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The rate limit for delivering messages to push consumers, expressed in bits per second
        /// </summary>
        [Output("ratelimit")]
        public Output<int?> Ratelimit { get; private set; } = null!;

        /// <summary>
        /// The rate at which messages will be replayed from the stream
        /// </summary>
        [Output("replayPolicy")]
        public Output<string?> ReplayPolicy { get; private set; } = null!;

        /// <summary>
        /// How many replicas of the data to keep in a clustered environment
        /// </summary>
        [Output("replicas")]
        public Output<int?> Replicas { get; private set; } = null!;

        /// <summary>
        /// The percentage of acknowledgements that will be sampled for observability purposes
        /// </summary>
        [Output("sampleFreq")]
        public Output<int?> SampleFreq { get; private set; } = null!;

        /// <summary>
        /// The timestamp of the first message that will be delivered by this Consumer
        /// </summary>
        [Output("startTime")]
        public Output<string?> StartTime { get; private set; } = null!;

        /// <summary>
        /// The name of the Stream that this consumer consumes
        /// </summary>
        [Output("streamId")]
        public Output<string> StreamId { get; private set; } = null!;

        /// <summary>
        /// The Stream Sequence that will be the first message delivered by this Consumer
        /// </summary>
        [Output("streamSequence")]
        public Output<int?> StreamSequence { get; private set; } = null!;


        /// <summary>
        /// Create a Consumer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Consumer(string name, ConsumerArgs args, CustomResourceOptions? options = null)
            : base("jetstream:index/consumer:Consumer", name, args ?? new ConsumerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Consumer(string name, Input<string> id, ConsumerState? state = null, CustomResourceOptions? options = null)
            : base("jetstream:index/consumer:Consumer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Consumer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Consumer Get(string name, Input<string> id, ConsumerState? state = null, CustomResourceOptions? options = null)
        {
            return new Consumer(name, id, state, options);
        }
    }

    public sealed class ConsumerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The delivery acknowledgement policy to apply to the Consumer
        /// </summary>
        [Input("ackPolicy")]
        public Input<string>? AckPolicy { get; set; }

        /// <summary>
        /// Number of seconds to wait for acknowledgement
        /// </summary>
        [Input("ackWait")]
        public Input<int>? AckWait { get; set; }

        [Input("backoffs")]
        private InputList<int>? _backoffs;

        /// <summary>
        /// List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        /// </summary>
        public InputList<int> Backoffs
        {
            get => _backoffs ?? (_backoffs = new InputList<int>());
            set => _backoffs = value;
        }

        /// <summary>
        /// Starts at the first available message in the Stream
        /// </summary>
        [Input("deliverAll")]
        public Input<bool>? DeliverAll { get; set; }

        /// <summary>
        /// Starts at the latest available message in the Stream
        /// </summary>
        [Input("deliverLast")]
        public Input<bool>? DeliverLast { get; set; }

        /// <summary>
        /// Starts with the last message for each subject matched by filter
        /// </summary>
        [Input("deliverLastPerSubject")]
        public Input<bool>? DeliverLastPerSubject { get; set; }

        /// <summary>
        /// Starts with the next available message in the Stream
        /// </summary>
        [Input("deliverNew")]
        public Input<bool>? DeliverNew { get; set; }

        /// <summary>
        /// When set Push consumers will only deliver messages to subscriptions with this group set
        /// </summary>
        [Input("deliveryGroup")]
        public Input<string>? DeliveryGroup { get; set; }

        /// <summary>
        /// The subject where a Push-based consumer will deliver messages
        /// </summary>
        [Input("deliverySubject")]
        public Input<string>? DeliverySubject { get; set; }

        /// <summary>
        /// Contains additional information about this consumer
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The durable name of the Consumer
        /// </summary>
        [Input("durableName", required: true)]
        public Input<string> DurableName { get; set; } = null!;

        /// <summary>
        /// Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        /// </summary>
        [Input("filterSubject")]
        public Input<string>? FilterSubject { get; set; }

        [Input("filterSubjects")]
        private InputList<string>? _filterSubjects;

        /// <summary>
        /// Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        /// </summary>
        public InputList<string> FilterSubjects
        {
            get => _filterSubjects ?? (_filterSubjects = new InputList<string>());
            set => _filterSubjects = value;
        }

        /// <summary>
        /// Enable flow control for push consumers
        /// </summary>
        [Input("flowControl")]
        public Input<bool>? FlowControl { get; set; }

        /// <summary>
        /// When true no message bodies will be delivered only headers
        /// </summary>
        [Input("headersOnly")]
        public Input<bool>? HeadersOnly { get; set; }

        /// <summary>
        /// Enable heartbeat messages for push consumers, duration specified in seconds
        /// </summary>
        [Input("heartbeat")]
        public Input<int>? Heartbeat { get; set; }

        /// <summary>
        /// Removes the consumer after a idle period, specified as a duration in seconds
        /// </summary>
        [Input("inactiveThreshold")]
        public Input<int>? InactiveThreshold { get; set; }

        /// <summary>
        /// Maximum pending Acks before consumers are paused
        /// </summary>
        [Input("maxAckPending")]
        public Input<int>? MaxAckPending { get; set; }

        /// <summary>
        /// Limits Pull Batch sizes to this maximum
        /// </summary>
        [Input("maxBatch")]
        public Input<int>? MaxBatch { get; set; }

        /// <summary>
        /// The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        /// </summary>
        [Input("maxBytes")]
        public Input<int>? MaxBytes { get; set; }

        /// <summary>
        /// Maximum deliveries to attempt for each message
        /// </summary>
        [Input("maxDelivery")]
        public Input<int>? MaxDelivery { get; set; }

        /// <summary>
        /// Limits the Pull Expires duration to this maximum in seconds
        /// </summary>
        [Input("maxExpires")]
        public Input<int>? MaxExpires { get; set; }

        /// <summary>
        /// The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        /// </summary>
        [Input("maxWaiting")]
        public Input<int>? MaxWaiting { get; set; }

        /// <summary>
        /// Force the consumer state to be kept in memory rather than inherit the setting from the stream
        /// </summary>
        [Input("memory")]
        public Input<bool>? Memory { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Free form metadata about the consumer
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The rate limit for delivering messages to push consumers, expressed in bits per second
        /// </summary>
        [Input("ratelimit")]
        public Input<int>? Ratelimit { get; set; }

        /// <summary>
        /// The rate at which messages will be replayed from the stream
        /// </summary>
        [Input("replayPolicy")]
        public Input<string>? ReplayPolicy { get; set; }

        /// <summary>
        /// How many replicas of the data to keep in a clustered environment
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// The percentage of acknowledgements that will be sampled for observability purposes
        /// </summary>
        [Input("sampleFreq")]
        public Input<int>? SampleFreq { get; set; }

        /// <summary>
        /// The timestamp of the first message that will be delivered by this Consumer
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// The name of the Stream that this consumer consumes
        /// </summary>
        [Input("streamId", required: true)]
        public Input<string> StreamId { get; set; } = null!;

        /// <summary>
        /// The Stream Sequence that will be the first message delivered by this Consumer
        /// </summary>
        [Input("streamSequence")]
        public Input<int>? StreamSequence { get; set; }

        public ConsumerArgs()
        {
        }
        public static new ConsumerArgs Empty => new ConsumerArgs();
    }

    public sealed class ConsumerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The delivery acknowledgement policy to apply to the Consumer
        /// </summary>
        [Input("ackPolicy")]
        public Input<string>? AckPolicy { get; set; }

        /// <summary>
        /// Number of seconds to wait for acknowledgement
        /// </summary>
        [Input("ackWait")]
        public Input<int>? AckWait { get; set; }

        [Input("backoffs")]
        private InputList<int>? _backoffs;

        /// <summary>
        /// List of durations in Go format that represents a retry time scale for NaK'd messages. A list of durations in seconds.
        /// </summary>
        public InputList<int> Backoffs
        {
            get => _backoffs ?? (_backoffs = new InputList<int>());
            set => _backoffs = value;
        }

        /// <summary>
        /// Starts at the first available message in the Stream
        /// </summary>
        [Input("deliverAll")]
        public Input<bool>? DeliverAll { get; set; }

        /// <summary>
        /// Starts at the latest available message in the Stream
        /// </summary>
        [Input("deliverLast")]
        public Input<bool>? DeliverLast { get; set; }

        /// <summary>
        /// Starts with the last message for each subject matched by filter
        /// </summary>
        [Input("deliverLastPerSubject")]
        public Input<bool>? DeliverLastPerSubject { get; set; }

        /// <summary>
        /// Starts with the next available message in the Stream
        /// </summary>
        [Input("deliverNew")]
        public Input<bool>? DeliverNew { get; set; }

        /// <summary>
        /// When set Push consumers will only deliver messages to subscriptions with this group set
        /// </summary>
        [Input("deliveryGroup")]
        public Input<string>? DeliveryGroup { get; set; }

        /// <summary>
        /// The subject where a Push-based consumer will deliver messages
        /// </summary>
        [Input("deliverySubject")]
        public Input<string>? DeliverySubject { get; set; }

        /// <summary>
        /// Contains additional information about this consumer
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The durable name of the Consumer
        /// </summary>
        [Input("durableName")]
        public Input<string>? DurableName { get; set; }

        /// <summary>
        /// Only receive a subset of messages from the Stream based on the subject they entered the Stream on
        /// </summary>
        [Input("filterSubject")]
        public Input<string>? FilterSubject { get; set; }

        [Input("filterSubjects")]
        private InputList<string>? _filterSubjects;

        /// <summary>
        /// Only receive a subset of messages from the stream baseed on the subjects they entered the Streeam on, exlusive to filter_subject and works with nats-server v2.10 or better
        /// </summary>
        public InputList<string> FilterSubjects
        {
            get => _filterSubjects ?? (_filterSubjects = new InputList<string>());
            set => _filterSubjects = value;
        }

        /// <summary>
        /// Enable flow control for push consumers
        /// </summary>
        [Input("flowControl")]
        public Input<bool>? FlowControl { get; set; }

        /// <summary>
        /// When true no message bodies will be delivered only headers
        /// </summary>
        [Input("headersOnly")]
        public Input<bool>? HeadersOnly { get; set; }

        /// <summary>
        /// Enable heartbeat messages for push consumers, duration specified in seconds
        /// </summary>
        [Input("heartbeat")]
        public Input<int>? Heartbeat { get; set; }

        /// <summary>
        /// Removes the consumer after a idle period, specified as a duration in seconds
        /// </summary>
        [Input("inactiveThreshold")]
        public Input<int>? InactiveThreshold { get; set; }

        /// <summary>
        /// Maximum pending Acks before consumers are paused
        /// </summary>
        [Input("maxAckPending")]
        public Input<int>? MaxAckPending { get; set; }

        /// <summary>
        /// Limits Pull Batch sizes to this maximum
        /// </summary>
        [Input("maxBatch")]
        public Input<int>? MaxBatch { get; set; }

        /// <summary>
        /// The maximum bytes value that maybe set when dong a pull on a Pull Consumer
        /// </summary>
        [Input("maxBytes")]
        public Input<int>? MaxBytes { get; set; }

        /// <summary>
        /// Maximum deliveries to attempt for each message
        /// </summary>
        [Input("maxDelivery")]
        public Input<int>? MaxDelivery { get; set; }

        /// <summary>
        /// Limits the Pull Expires duration to this maximum in seconds
        /// </summary>
        [Input("maxExpires")]
        public Input<int>? MaxExpires { get; set; }

        /// <summary>
        /// The number of pulls that can be outstanding on a pull consumer, pulls received after this is reached are ignored
        /// </summary>
        [Input("maxWaiting")]
        public Input<int>? MaxWaiting { get; set; }

        /// <summary>
        /// Force the consumer state to be kept in memory rather than inherit the setting from the stream
        /// </summary>
        [Input("memory")]
        public Input<bool>? Memory { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Free form metadata about the consumer
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The rate limit for delivering messages to push consumers, expressed in bits per second
        /// </summary>
        [Input("ratelimit")]
        public Input<int>? Ratelimit { get; set; }

        /// <summary>
        /// The rate at which messages will be replayed from the stream
        /// </summary>
        [Input("replayPolicy")]
        public Input<string>? ReplayPolicy { get; set; }

        /// <summary>
        /// How many replicas of the data to keep in a clustered environment
        /// </summary>
        [Input("replicas")]
        public Input<int>? Replicas { get; set; }

        /// <summary>
        /// The percentage of acknowledgements that will be sampled for observability purposes
        /// </summary>
        [Input("sampleFreq")]
        public Input<int>? SampleFreq { get; set; }

        /// <summary>
        /// The timestamp of the first message that will be delivered by this Consumer
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// The name of the Stream that this consumer consumes
        /// </summary>
        [Input("streamId")]
        public Input<string>? StreamId { get; set; }

        /// <summary>
        /// The Stream Sequence that will be the first message delivered by this Consumer
        /// </summary>
        [Input("streamSequence")]
        public Input<int>? StreamSequence { get; set; }

        public ConsumerState()
        {
        }
        public static new ConsumerState Empty => new ConsumerState();
    }
}
