// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Jetstream.Inputs
{

    public sealed class StreamMirrorGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Streams replicated from other accounts
        /// </summary>
        [Input("external")]
        public Input<Inputs.StreamMirrorExternalGetArgs>? External { get; set; }

        /// <summary>
        /// Only copy messages matching a specific subject, not usable for mirrors
        /// </summary>
        [Input("filterSubject")]
        public Input<string>? FilterSubject { get; set; }

        /// <summary>
        /// The name of the source Stream
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The sequence to start mirroring from
        /// </summary>
        [Input("startSeq")]
        public Input<int>? StartSeq { get; set; }

        /// <summary>
        /// The time stamp in the source stream to start from, in RFC3339 format
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("subjectTransforms")]
        private InputList<Inputs.StreamMirrorSubjectTransformGetArgs>? _subjectTransforms;

        /// <summary>
        /// The subject filtering sources and associated destination transforms
        /// </summary>
        public InputList<Inputs.StreamMirrorSubjectTransformGetArgs> SubjectTransforms
        {
            get => _subjectTransforms ?? (_subjectTransforms = new InputList<Inputs.StreamMirrorSubjectTransformGetArgs>());
            set => _subjectTransforms = value;
        }

        public StreamMirrorGetArgs()
        {
        }
        public static new StreamMirrorGetArgs Empty => new StreamMirrorGetArgs();
    }
}
