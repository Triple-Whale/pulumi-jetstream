// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Jetstream
{
    /// <summary>
    /// The provider type for the jetstream package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [JetstreamResourceType("pulumi:providers:jetstream")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The contents of the NATS 2.0 Credentials file to use
        /// </summary>
        [Output("credentialData")]
        public Output<string?> CredentialData { get; private set; } = null!;

        /// <summary>
        /// Path to the NATS 2.0 credentials file to use for authentication
        /// </summary>
        [Output("credentials")]
        public Output<string?> Credentials { get; private set; } = null!;

        /// <summary>
        /// Connect using a NKEY seed stored in a file
        /// </summary>
        [Output("nkey")]
        public Output<string?> Nkey { get; private set; } = null!;

        /// <summary>
        /// Connect using a password
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Comma separated list of NATS servers to connect to
        /// </summary>
        [Output("servers")]
        public Output<string> Servers { get; private set; } = null!;

        /// <summary>
        /// Connect using an username, used as token when no password is given
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("jetstream", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The contents of the NATS 2.0 Credentials file to use
        /// </summary>
        [Input("credentialData")]
        public Input<string>? CredentialData { get; set; }

        /// <summary>
        /// Path to the NATS 2.0 credentials file to use for authentication
        /// </summary>
        [Input("credentials")]
        public Input<string>? Credentials { get; set; }

        /// <summary>
        /// Connect using a NKEY seed stored in a file
        /// </summary>
        [Input("nkey")]
        public Input<string>? Nkey { get; set; }

        /// <summary>
        /// Connect using a password
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Comma separated list of NATS servers to connect to
        /// </summary>
        [Input("servers", required: true)]
        public Input<string> Servers { get; set; } = null!;

        [Input("tls", json: true)]
        public Input<Inputs.ProviderTlsArgs>? Tls { get; set; }

        /// <summary>
        /// Connect using an username, used as token when no password is given
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
