// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jetstream

import (
	"context"
	"reflect"

	"github.com/Triple-Whale/pulumi-jetstream/sdk/go/jetstream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ProviderTls struct {
	// Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
	CaFile *string `pulumi:"caFile"`
	// The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
	CaFileData *string `pulumi:"caFileData"`
	// Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
	CertFile *string `pulumi:"certFile"`
	// The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
	CertFileData *string `pulumi:"certFileData"`
	// Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
	KeyFile *string `pulumi:"keyFile"`
	// The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
	KeyFileData *string `pulumi:"keyFileData"`
}

// ProviderTlsInput is an input type that accepts ProviderTlsArgs and ProviderTlsOutput values.
// You can construct a concrete instance of `ProviderTlsInput` via:
//
//	ProviderTlsArgs{...}
type ProviderTlsInput interface {
	pulumi.Input

	ToProviderTlsOutput() ProviderTlsOutput
	ToProviderTlsOutputWithContext(context.Context) ProviderTlsOutput
}

type ProviderTlsArgs struct {
	// Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
	CaFile pulumi.StringPtrInput `pulumi:"caFile"`
	// The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
	CaFileData pulumi.StringPtrInput `pulumi:"caFileData"`
	// Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
	CertFile pulumi.StringPtrInput `pulumi:"certFile"`
	// The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
	CertFileData pulumi.StringPtrInput `pulumi:"certFileData"`
	// Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
	KeyFile pulumi.StringPtrInput `pulumi:"keyFile"`
	// The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
	KeyFileData pulumi.StringPtrInput `pulumi:"keyFileData"`
}

func (ProviderTlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTls)(nil)).Elem()
}

func (i ProviderTlsArgs) ToProviderTlsOutput() ProviderTlsOutput {
	return i.ToProviderTlsOutputWithContext(context.Background())
}

func (i ProviderTlsArgs) ToProviderTlsOutputWithContext(ctx context.Context) ProviderTlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTlsOutput)
}

func (i ProviderTlsArgs) ToProviderTlsPtrOutput() ProviderTlsPtrOutput {
	return i.ToProviderTlsPtrOutputWithContext(context.Background())
}

func (i ProviderTlsArgs) ToProviderTlsPtrOutputWithContext(ctx context.Context) ProviderTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTlsOutput).ToProviderTlsPtrOutputWithContext(ctx)
}

// ProviderTlsPtrInput is an input type that accepts ProviderTlsArgs, ProviderTlsPtr and ProviderTlsPtrOutput values.
// You can construct a concrete instance of `ProviderTlsPtrInput` via:
//
//	        ProviderTlsArgs{...}
//
//	or:
//
//	        nil
type ProviderTlsPtrInput interface {
	pulumi.Input

	ToProviderTlsPtrOutput() ProviderTlsPtrOutput
	ToProviderTlsPtrOutputWithContext(context.Context) ProviderTlsPtrOutput
}

type providerTlsPtrType ProviderTlsArgs

func ProviderTlsPtr(v *ProviderTlsArgs) ProviderTlsPtrInput {
	return (*providerTlsPtrType)(v)
}

func (*providerTlsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderTls)(nil)).Elem()
}

func (i *providerTlsPtrType) ToProviderTlsPtrOutput() ProviderTlsPtrOutput {
	return i.ToProviderTlsPtrOutputWithContext(context.Background())
}

func (i *providerTlsPtrType) ToProviderTlsPtrOutputWithContext(ctx context.Context) ProviderTlsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderTlsPtrOutput)
}

type ProviderTlsOutput struct{ *pulumi.OutputState }

func (ProviderTlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTls)(nil)).Elem()
}

func (o ProviderTlsOutput) ToProviderTlsOutput() ProviderTlsOutput {
	return o
}

func (o ProviderTlsOutput) ToProviderTlsOutputWithContext(ctx context.Context) ProviderTlsOutput {
	return o
}

func (o ProviderTlsOutput) ToProviderTlsPtrOutput() ProviderTlsPtrOutput {
	return o.ToProviderTlsPtrOutputWithContext(context.Background())
}

func (o ProviderTlsOutput) ToProviderTlsPtrOutputWithContext(ctx context.Context) ProviderTlsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderTls) *ProviderTls {
		return &v
	}).(ProviderTlsPtrOutput)
}

// Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
func (o ProviderTlsOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderTls) *string { return v.CaFile }).(pulumi.StringPtrOutput)
}

// The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
func (o ProviderTlsOutput) CaFileData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderTls) *string { return v.CaFileData }).(pulumi.StringPtrOutput)
}

// Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderTls) *string { return v.CertFile }).(pulumi.StringPtrOutput)
}

// The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsOutput) CertFileData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderTls) *string { return v.CertFileData }).(pulumi.StringPtrOutput)
}

// Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderTls) *string { return v.KeyFile }).(pulumi.StringPtrOutput)
}

// The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsOutput) KeyFileData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderTls) *string { return v.KeyFileData }).(pulumi.StringPtrOutput)
}

type ProviderTlsPtrOutput struct{ *pulumi.OutputState }

func (ProviderTlsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderTls)(nil)).Elem()
}

func (o ProviderTlsPtrOutput) ToProviderTlsPtrOutput() ProviderTlsPtrOutput {
	return o
}

func (o ProviderTlsPtrOutput) ToProviderTlsPtrOutputWithContext(ctx context.Context) ProviderTlsPtrOutput {
	return o
}

func (o ProviderTlsPtrOutput) Elem() ProviderTlsOutput {
	return o.ApplyT(func(v *ProviderTls) ProviderTls {
		if v != nil {
			return *v
		}
		var ret ProviderTls
		return ret
	}).(ProviderTlsOutput)
}

// Path to the server root CA file (in PEM format). Needed when the NATS server has TLS enabled with an unknown root CA
func (o ProviderTlsPtrOutput) CaFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderTls) *string {
		if v == nil {
			return nil
		}
		return v.CaFile
	}).(pulumi.StringPtrOutput)
}

// The root CA (file) content, in PEM format. Needed when the NATS server has TLS enabled with an unknown root CA
func (o ProviderTlsPtrOutput) CaFileData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderTls) *string {
		if v == nil {
			return nil
		}
		return v.CaFileData
	}).(pulumi.StringPtrOutput)
}

// Path to client cert file (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderTls) *string {
		if v == nil {
			return nil
		}
		return v.CertFile
	}).(pulumi.StringPtrOutput)
}

// The cert file content (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsPtrOutput) CertFileData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderTls) *string {
		if v == nil {
			return nil
		}
		return v.CertFileData
	}).(pulumi.StringPtrOutput)
}

// Path to client key file (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderTls) *string {
		if v == nil {
			return nil
		}
		return v.KeyFile
	}).(pulumi.StringPtrOutput)
}

// The key file content (in PEM format). Needed when NATS server is configured to verify client certificate
func (o ProviderTlsPtrOutput) KeyFileData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderTls) *string {
		if v == nil {
			return nil
		}
		return v.KeyFileData
	}).(pulumi.StringPtrOutput)
}

type StreamMirror struct {
	// Streams replicated from other accounts
	External *StreamMirrorExternal `pulumi:"external"`
	// Only copy messages matching a specific subject, not usable for mirrors
	FilterSubject *string `pulumi:"filterSubject"`
	// The name of the source Stream
	Name string `pulumi:"name"`
	// The sequence to start mirroring from
	StartSeq *int `pulumi:"startSeq"`
	// The time stamp in the source stream to start from, in RFC3339 format
	StartTime *string `pulumi:"startTime"`
	// The subject filtering sources and associated destination transforms
	SubjectTransforms []StreamMirrorSubjectTransform `pulumi:"subjectTransforms"`
}

// StreamMirrorInput is an input type that accepts StreamMirrorArgs and StreamMirrorOutput values.
// You can construct a concrete instance of `StreamMirrorInput` via:
//
//	StreamMirrorArgs{...}
type StreamMirrorInput interface {
	pulumi.Input

	ToStreamMirrorOutput() StreamMirrorOutput
	ToStreamMirrorOutputWithContext(context.Context) StreamMirrorOutput
}

type StreamMirrorArgs struct {
	// Streams replicated from other accounts
	External StreamMirrorExternalPtrInput `pulumi:"external"`
	// Only copy messages matching a specific subject, not usable for mirrors
	FilterSubject pulumi.StringPtrInput `pulumi:"filterSubject"`
	// The name of the source Stream
	Name pulumi.StringInput `pulumi:"name"`
	// The sequence to start mirroring from
	StartSeq pulumi.IntPtrInput `pulumi:"startSeq"`
	// The time stamp in the source stream to start from, in RFC3339 format
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The subject filtering sources and associated destination transforms
	SubjectTransforms StreamMirrorSubjectTransformArrayInput `pulumi:"subjectTransforms"`
}

func (StreamMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamMirror)(nil)).Elem()
}

func (i StreamMirrorArgs) ToStreamMirrorOutput() StreamMirrorOutput {
	return i.ToStreamMirrorOutputWithContext(context.Background())
}

func (i StreamMirrorArgs) ToStreamMirrorOutputWithContext(ctx context.Context) StreamMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorOutput)
}

func (i StreamMirrorArgs) ToStreamMirrorPtrOutput() StreamMirrorPtrOutput {
	return i.ToStreamMirrorPtrOutputWithContext(context.Background())
}

func (i StreamMirrorArgs) ToStreamMirrorPtrOutputWithContext(ctx context.Context) StreamMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorOutput).ToStreamMirrorPtrOutputWithContext(ctx)
}

// StreamMirrorPtrInput is an input type that accepts StreamMirrorArgs, StreamMirrorPtr and StreamMirrorPtrOutput values.
// You can construct a concrete instance of `StreamMirrorPtrInput` via:
//
//	        StreamMirrorArgs{...}
//
//	or:
//
//	        nil
type StreamMirrorPtrInput interface {
	pulumi.Input

	ToStreamMirrorPtrOutput() StreamMirrorPtrOutput
	ToStreamMirrorPtrOutputWithContext(context.Context) StreamMirrorPtrOutput
}

type streamMirrorPtrType StreamMirrorArgs

func StreamMirrorPtr(v *StreamMirrorArgs) StreamMirrorPtrInput {
	return (*streamMirrorPtrType)(v)
}

func (*streamMirrorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamMirror)(nil)).Elem()
}

func (i *streamMirrorPtrType) ToStreamMirrorPtrOutput() StreamMirrorPtrOutput {
	return i.ToStreamMirrorPtrOutputWithContext(context.Background())
}

func (i *streamMirrorPtrType) ToStreamMirrorPtrOutputWithContext(ctx context.Context) StreamMirrorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorPtrOutput)
}

type StreamMirrorOutput struct{ *pulumi.OutputState }

func (StreamMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamMirror)(nil)).Elem()
}

func (o StreamMirrorOutput) ToStreamMirrorOutput() StreamMirrorOutput {
	return o
}

func (o StreamMirrorOutput) ToStreamMirrorOutputWithContext(ctx context.Context) StreamMirrorOutput {
	return o
}

func (o StreamMirrorOutput) ToStreamMirrorPtrOutput() StreamMirrorPtrOutput {
	return o.ToStreamMirrorPtrOutputWithContext(context.Background())
}

func (o StreamMirrorOutput) ToStreamMirrorPtrOutputWithContext(ctx context.Context) StreamMirrorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamMirror) *StreamMirror {
		return &v
	}).(StreamMirrorPtrOutput)
}

// Streams replicated from other accounts
func (o StreamMirrorOutput) External() StreamMirrorExternalPtrOutput {
	return o.ApplyT(func(v StreamMirror) *StreamMirrorExternal { return v.External }).(StreamMirrorExternalPtrOutput)
}

// Only copy messages matching a specific subject, not usable for mirrors
func (o StreamMirrorOutput) FilterSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamMirror) *string { return v.FilterSubject }).(pulumi.StringPtrOutput)
}

// The name of the source Stream
func (o StreamMirrorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StreamMirror) string { return v.Name }).(pulumi.StringOutput)
}

// The sequence to start mirroring from
func (o StreamMirrorOutput) StartSeq() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamMirror) *int { return v.StartSeq }).(pulumi.IntPtrOutput)
}

// The time stamp in the source stream to start from, in RFC3339 format
func (o StreamMirrorOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamMirror) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The subject filtering sources and associated destination transforms
func (o StreamMirrorOutput) SubjectTransforms() StreamMirrorSubjectTransformArrayOutput {
	return o.ApplyT(func(v StreamMirror) []StreamMirrorSubjectTransform { return v.SubjectTransforms }).(StreamMirrorSubjectTransformArrayOutput)
}

type StreamMirrorPtrOutput struct{ *pulumi.OutputState }

func (StreamMirrorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamMirror)(nil)).Elem()
}

func (o StreamMirrorPtrOutput) ToStreamMirrorPtrOutput() StreamMirrorPtrOutput {
	return o
}

func (o StreamMirrorPtrOutput) ToStreamMirrorPtrOutputWithContext(ctx context.Context) StreamMirrorPtrOutput {
	return o
}

func (o StreamMirrorPtrOutput) Elem() StreamMirrorOutput {
	return o.ApplyT(func(v *StreamMirror) StreamMirror {
		if v != nil {
			return *v
		}
		var ret StreamMirror
		return ret
	}).(StreamMirrorOutput)
}

// Streams replicated from other accounts
func (o StreamMirrorPtrOutput) External() StreamMirrorExternalPtrOutput {
	return o.ApplyT(func(v *StreamMirror) *StreamMirrorExternal {
		if v == nil {
			return nil
		}
		return v.External
	}).(StreamMirrorExternalPtrOutput)
}

// Only copy messages matching a specific subject, not usable for mirrors
func (o StreamMirrorPtrOutput) FilterSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamMirror) *string {
		if v == nil {
			return nil
		}
		return v.FilterSubject
	}).(pulumi.StringPtrOutput)
}

// The name of the source Stream
func (o StreamMirrorPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamMirror) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// The sequence to start mirroring from
func (o StreamMirrorPtrOutput) StartSeq() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMirror) *int {
		if v == nil {
			return nil
		}
		return v.StartSeq
	}).(pulumi.IntPtrOutput)
}

// The time stamp in the source stream to start from, in RFC3339 format
func (o StreamMirrorPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamMirror) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// The subject filtering sources and associated destination transforms
func (o StreamMirrorPtrOutput) SubjectTransforms() StreamMirrorSubjectTransformArrayOutput {
	return o.ApplyT(func(v *StreamMirror) []StreamMirrorSubjectTransform {
		if v == nil {
			return nil
		}
		return v.SubjectTransforms
	}).(StreamMirrorSubjectTransformArrayOutput)
}

type StreamMirrorExternal struct {
	// The subject prefix for the remote API
	Api *string `pulumi:"api"`
	// The subject prefix where messages will be delivered to
	Deliver *string `pulumi:"deliver"`
}

// StreamMirrorExternalInput is an input type that accepts StreamMirrorExternalArgs and StreamMirrorExternalOutput values.
// You can construct a concrete instance of `StreamMirrorExternalInput` via:
//
//	StreamMirrorExternalArgs{...}
type StreamMirrorExternalInput interface {
	pulumi.Input

	ToStreamMirrorExternalOutput() StreamMirrorExternalOutput
	ToStreamMirrorExternalOutputWithContext(context.Context) StreamMirrorExternalOutput
}

type StreamMirrorExternalArgs struct {
	// The subject prefix for the remote API
	Api pulumi.StringPtrInput `pulumi:"api"`
	// The subject prefix where messages will be delivered to
	Deliver pulumi.StringPtrInput `pulumi:"deliver"`
}

func (StreamMirrorExternalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamMirrorExternal)(nil)).Elem()
}

func (i StreamMirrorExternalArgs) ToStreamMirrorExternalOutput() StreamMirrorExternalOutput {
	return i.ToStreamMirrorExternalOutputWithContext(context.Background())
}

func (i StreamMirrorExternalArgs) ToStreamMirrorExternalOutputWithContext(ctx context.Context) StreamMirrorExternalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorExternalOutput)
}

func (i StreamMirrorExternalArgs) ToStreamMirrorExternalPtrOutput() StreamMirrorExternalPtrOutput {
	return i.ToStreamMirrorExternalPtrOutputWithContext(context.Background())
}

func (i StreamMirrorExternalArgs) ToStreamMirrorExternalPtrOutputWithContext(ctx context.Context) StreamMirrorExternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorExternalOutput).ToStreamMirrorExternalPtrOutputWithContext(ctx)
}

// StreamMirrorExternalPtrInput is an input type that accepts StreamMirrorExternalArgs, StreamMirrorExternalPtr and StreamMirrorExternalPtrOutput values.
// You can construct a concrete instance of `StreamMirrorExternalPtrInput` via:
//
//	        StreamMirrorExternalArgs{...}
//
//	or:
//
//	        nil
type StreamMirrorExternalPtrInput interface {
	pulumi.Input

	ToStreamMirrorExternalPtrOutput() StreamMirrorExternalPtrOutput
	ToStreamMirrorExternalPtrOutputWithContext(context.Context) StreamMirrorExternalPtrOutput
}

type streamMirrorExternalPtrType StreamMirrorExternalArgs

func StreamMirrorExternalPtr(v *StreamMirrorExternalArgs) StreamMirrorExternalPtrInput {
	return (*streamMirrorExternalPtrType)(v)
}

func (*streamMirrorExternalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamMirrorExternal)(nil)).Elem()
}

func (i *streamMirrorExternalPtrType) ToStreamMirrorExternalPtrOutput() StreamMirrorExternalPtrOutput {
	return i.ToStreamMirrorExternalPtrOutputWithContext(context.Background())
}

func (i *streamMirrorExternalPtrType) ToStreamMirrorExternalPtrOutputWithContext(ctx context.Context) StreamMirrorExternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorExternalPtrOutput)
}

type StreamMirrorExternalOutput struct{ *pulumi.OutputState }

func (StreamMirrorExternalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamMirrorExternal)(nil)).Elem()
}

func (o StreamMirrorExternalOutput) ToStreamMirrorExternalOutput() StreamMirrorExternalOutput {
	return o
}

func (o StreamMirrorExternalOutput) ToStreamMirrorExternalOutputWithContext(ctx context.Context) StreamMirrorExternalOutput {
	return o
}

func (o StreamMirrorExternalOutput) ToStreamMirrorExternalPtrOutput() StreamMirrorExternalPtrOutput {
	return o.ToStreamMirrorExternalPtrOutputWithContext(context.Background())
}

func (o StreamMirrorExternalOutput) ToStreamMirrorExternalPtrOutputWithContext(ctx context.Context) StreamMirrorExternalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamMirrorExternal) *StreamMirrorExternal {
		return &v
	}).(StreamMirrorExternalPtrOutput)
}

// The subject prefix for the remote API
func (o StreamMirrorExternalOutput) Api() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamMirrorExternal) *string { return v.Api }).(pulumi.StringPtrOutput)
}

// The subject prefix where messages will be delivered to
func (o StreamMirrorExternalOutput) Deliver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamMirrorExternal) *string { return v.Deliver }).(pulumi.StringPtrOutput)
}

type StreamMirrorExternalPtrOutput struct{ *pulumi.OutputState }

func (StreamMirrorExternalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamMirrorExternal)(nil)).Elem()
}

func (o StreamMirrorExternalPtrOutput) ToStreamMirrorExternalPtrOutput() StreamMirrorExternalPtrOutput {
	return o
}

func (o StreamMirrorExternalPtrOutput) ToStreamMirrorExternalPtrOutputWithContext(ctx context.Context) StreamMirrorExternalPtrOutput {
	return o
}

func (o StreamMirrorExternalPtrOutput) Elem() StreamMirrorExternalOutput {
	return o.ApplyT(func(v *StreamMirrorExternal) StreamMirrorExternal {
		if v != nil {
			return *v
		}
		var ret StreamMirrorExternal
		return ret
	}).(StreamMirrorExternalOutput)
}

// The subject prefix for the remote API
func (o StreamMirrorExternalPtrOutput) Api() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamMirrorExternal) *string {
		if v == nil {
			return nil
		}
		return v.Api
	}).(pulumi.StringPtrOutput)
}

// The subject prefix where messages will be delivered to
func (o StreamMirrorExternalPtrOutput) Deliver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamMirrorExternal) *string {
		if v == nil {
			return nil
		}
		return v.Deliver
	}).(pulumi.StringPtrOutput)
}

type StreamMirrorSubjectTransform struct {
	// The subject transform destination
	Destination string `pulumi:"destination"`
	// The subject transform source
	Source string `pulumi:"source"`
}

// StreamMirrorSubjectTransformInput is an input type that accepts StreamMirrorSubjectTransformArgs and StreamMirrorSubjectTransformOutput values.
// You can construct a concrete instance of `StreamMirrorSubjectTransformInput` via:
//
//	StreamMirrorSubjectTransformArgs{...}
type StreamMirrorSubjectTransformInput interface {
	pulumi.Input

	ToStreamMirrorSubjectTransformOutput() StreamMirrorSubjectTransformOutput
	ToStreamMirrorSubjectTransformOutputWithContext(context.Context) StreamMirrorSubjectTransformOutput
}

type StreamMirrorSubjectTransformArgs struct {
	// The subject transform destination
	Destination pulumi.StringInput `pulumi:"destination"`
	// The subject transform source
	Source pulumi.StringInput `pulumi:"source"`
}

func (StreamMirrorSubjectTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamMirrorSubjectTransform)(nil)).Elem()
}

func (i StreamMirrorSubjectTransformArgs) ToStreamMirrorSubjectTransformOutput() StreamMirrorSubjectTransformOutput {
	return i.ToStreamMirrorSubjectTransformOutputWithContext(context.Background())
}

func (i StreamMirrorSubjectTransformArgs) ToStreamMirrorSubjectTransformOutputWithContext(ctx context.Context) StreamMirrorSubjectTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorSubjectTransformOutput)
}

// StreamMirrorSubjectTransformArrayInput is an input type that accepts StreamMirrorSubjectTransformArray and StreamMirrorSubjectTransformArrayOutput values.
// You can construct a concrete instance of `StreamMirrorSubjectTransformArrayInput` via:
//
//	StreamMirrorSubjectTransformArray{ StreamMirrorSubjectTransformArgs{...} }
type StreamMirrorSubjectTransformArrayInput interface {
	pulumi.Input

	ToStreamMirrorSubjectTransformArrayOutput() StreamMirrorSubjectTransformArrayOutput
	ToStreamMirrorSubjectTransformArrayOutputWithContext(context.Context) StreamMirrorSubjectTransformArrayOutput
}

type StreamMirrorSubjectTransformArray []StreamMirrorSubjectTransformInput

func (StreamMirrorSubjectTransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamMirrorSubjectTransform)(nil)).Elem()
}

func (i StreamMirrorSubjectTransformArray) ToStreamMirrorSubjectTransformArrayOutput() StreamMirrorSubjectTransformArrayOutput {
	return i.ToStreamMirrorSubjectTransformArrayOutputWithContext(context.Background())
}

func (i StreamMirrorSubjectTransformArray) ToStreamMirrorSubjectTransformArrayOutputWithContext(ctx context.Context) StreamMirrorSubjectTransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMirrorSubjectTransformArrayOutput)
}

type StreamMirrorSubjectTransformOutput struct{ *pulumi.OutputState }

func (StreamMirrorSubjectTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamMirrorSubjectTransform)(nil)).Elem()
}

func (o StreamMirrorSubjectTransformOutput) ToStreamMirrorSubjectTransformOutput() StreamMirrorSubjectTransformOutput {
	return o
}

func (o StreamMirrorSubjectTransformOutput) ToStreamMirrorSubjectTransformOutputWithContext(ctx context.Context) StreamMirrorSubjectTransformOutput {
	return o
}

// The subject transform destination
func (o StreamMirrorSubjectTransformOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v StreamMirrorSubjectTransform) string { return v.Destination }).(pulumi.StringOutput)
}

// The subject transform source
func (o StreamMirrorSubjectTransformOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v StreamMirrorSubjectTransform) string { return v.Source }).(pulumi.StringOutput)
}

type StreamMirrorSubjectTransformArrayOutput struct{ *pulumi.OutputState }

func (StreamMirrorSubjectTransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamMirrorSubjectTransform)(nil)).Elem()
}

func (o StreamMirrorSubjectTransformArrayOutput) ToStreamMirrorSubjectTransformArrayOutput() StreamMirrorSubjectTransformArrayOutput {
	return o
}

func (o StreamMirrorSubjectTransformArrayOutput) ToStreamMirrorSubjectTransformArrayOutputWithContext(ctx context.Context) StreamMirrorSubjectTransformArrayOutput {
	return o
}

func (o StreamMirrorSubjectTransformArrayOutput) Index(i pulumi.IntInput) StreamMirrorSubjectTransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamMirrorSubjectTransform {
		return vs[0].([]StreamMirrorSubjectTransform)[vs[1].(int)]
	}).(StreamMirrorSubjectTransformOutput)
}

type StreamSource struct {
	// Streams replicated from other accounts
	External *StreamSourceExternal `pulumi:"external"`
	// Only copy messages matching a specific subject, not usable for mirrors
	FilterSubject *string `pulumi:"filterSubject"`
	// The name of the source Stream
	Name string `pulumi:"name"`
	// The sequence to start mirroring from
	StartSeq *int `pulumi:"startSeq"`
	// The time stamp in the source stream to start from, in RFC3339 format
	StartTime *string `pulumi:"startTime"`
	// The subject filtering sources and associated destination transforms
	SubjectTransforms []StreamSourceSubjectTransform `pulumi:"subjectTransforms"`
}

// StreamSourceInput is an input type that accepts StreamSourceArgs and StreamSourceOutput values.
// You can construct a concrete instance of `StreamSourceInput` via:
//
//	StreamSourceArgs{...}
type StreamSourceInput interface {
	pulumi.Input

	ToStreamSourceOutput() StreamSourceOutput
	ToStreamSourceOutputWithContext(context.Context) StreamSourceOutput
}

type StreamSourceArgs struct {
	// Streams replicated from other accounts
	External StreamSourceExternalPtrInput `pulumi:"external"`
	// Only copy messages matching a specific subject, not usable for mirrors
	FilterSubject pulumi.StringPtrInput `pulumi:"filterSubject"`
	// The name of the source Stream
	Name pulumi.StringInput `pulumi:"name"`
	// The sequence to start mirroring from
	StartSeq pulumi.IntPtrInput `pulumi:"startSeq"`
	// The time stamp in the source stream to start from, in RFC3339 format
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// The subject filtering sources and associated destination transforms
	SubjectTransforms StreamSourceSubjectTransformArrayInput `pulumi:"subjectTransforms"`
}

func (StreamSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSource)(nil)).Elem()
}

func (i StreamSourceArgs) ToStreamSourceOutput() StreamSourceOutput {
	return i.ToStreamSourceOutputWithContext(context.Background())
}

func (i StreamSourceArgs) ToStreamSourceOutputWithContext(ctx context.Context) StreamSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceOutput)
}

// StreamSourceArrayInput is an input type that accepts StreamSourceArray and StreamSourceArrayOutput values.
// You can construct a concrete instance of `StreamSourceArrayInput` via:
//
//	StreamSourceArray{ StreamSourceArgs{...} }
type StreamSourceArrayInput interface {
	pulumi.Input

	ToStreamSourceArrayOutput() StreamSourceArrayOutput
	ToStreamSourceArrayOutputWithContext(context.Context) StreamSourceArrayOutput
}

type StreamSourceArray []StreamSourceInput

func (StreamSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSource)(nil)).Elem()
}

func (i StreamSourceArray) ToStreamSourceArrayOutput() StreamSourceArrayOutput {
	return i.ToStreamSourceArrayOutputWithContext(context.Background())
}

func (i StreamSourceArray) ToStreamSourceArrayOutputWithContext(ctx context.Context) StreamSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceArrayOutput)
}

type StreamSourceOutput struct{ *pulumi.OutputState }

func (StreamSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSource)(nil)).Elem()
}

func (o StreamSourceOutput) ToStreamSourceOutput() StreamSourceOutput {
	return o
}

func (o StreamSourceOutput) ToStreamSourceOutputWithContext(ctx context.Context) StreamSourceOutput {
	return o
}

// Streams replicated from other accounts
func (o StreamSourceOutput) External() StreamSourceExternalPtrOutput {
	return o.ApplyT(func(v StreamSource) *StreamSourceExternal { return v.External }).(StreamSourceExternalPtrOutput)
}

// Only copy messages matching a specific subject, not usable for mirrors
func (o StreamSourceOutput) FilterSubject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSource) *string { return v.FilterSubject }).(pulumi.StringPtrOutput)
}

// The name of the source Stream
func (o StreamSourceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSource) string { return v.Name }).(pulumi.StringOutput)
}

// The sequence to start mirroring from
func (o StreamSourceOutput) StartSeq() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StreamSource) *int { return v.StartSeq }).(pulumi.IntPtrOutput)
}

// The time stamp in the source stream to start from, in RFC3339 format
func (o StreamSourceOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSource) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// The subject filtering sources and associated destination transforms
func (o StreamSourceOutput) SubjectTransforms() StreamSourceSubjectTransformArrayOutput {
	return o.ApplyT(func(v StreamSource) []StreamSourceSubjectTransform { return v.SubjectTransforms }).(StreamSourceSubjectTransformArrayOutput)
}

type StreamSourceArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSource)(nil)).Elem()
}

func (o StreamSourceArrayOutput) ToStreamSourceArrayOutput() StreamSourceArrayOutput {
	return o
}

func (o StreamSourceArrayOutput) ToStreamSourceArrayOutputWithContext(ctx context.Context) StreamSourceArrayOutput {
	return o
}

func (o StreamSourceArrayOutput) Index(i pulumi.IntInput) StreamSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSource {
		return vs[0].([]StreamSource)[vs[1].(int)]
	}).(StreamSourceOutput)
}

type StreamSourceExternal struct {
	// The subject prefix for the remote API
	Api *string `pulumi:"api"`
	// The subject prefix where messages will be delivered to
	Deliver *string `pulumi:"deliver"`
}

// StreamSourceExternalInput is an input type that accepts StreamSourceExternalArgs and StreamSourceExternalOutput values.
// You can construct a concrete instance of `StreamSourceExternalInput` via:
//
//	StreamSourceExternalArgs{...}
type StreamSourceExternalInput interface {
	pulumi.Input

	ToStreamSourceExternalOutput() StreamSourceExternalOutput
	ToStreamSourceExternalOutputWithContext(context.Context) StreamSourceExternalOutput
}

type StreamSourceExternalArgs struct {
	// The subject prefix for the remote API
	Api pulumi.StringPtrInput `pulumi:"api"`
	// The subject prefix where messages will be delivered to
	Deliver pulumi.StringPtrInput `pulumi:"deliver"`
}

func (StreamSourceExternalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceExternal)(nil)).Elem()
}

func (i StreamSourceExternalArgs) ToStreamSourceExternalOutput() StreamSourceExternalOutput {
	return i.ToStreamSourceExternalOutputWithContext(context.Background())
}

func (i StreamSourceExternalArgs) ToStreamSourceExternalOutputWithContext(ctx context.Context) StreamSourceExternalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceExternalOutput)
}

func (i StreamSourceExternalArgs) ToStreamSourceExternalPtrOutput() StreamSourceExternalPtrOutput {
	return i.ToStreamSourceExternalPtrOutputWithContext(context.Background())
}

func (i StreamSourceExternalArgs) ToStreamSourceExternalPtrOutputWithContext(ctx context.Context) StreamSourceExternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceExternalOutput).ToStreamSourceExternalPtrOutputWithContext(ctx)
}

// StreamSourceExternalPtrInput is an input type that accepts StreamSourceExternalArgs, StreamSourceExternalPtr and StreamSourceExternalPtrOutput values.
// You can construct a concrete instance of `StreamSourceExternalPtrInput` via:
//
//	        StreamSourceExternalArgs{...}
//
//	or:
//
//	        nil
type StreamSourceExternalPtrInput interface {
	pulumi.Input

	ToStreamSourceExternalPtrOutput() StreamSourceExternalPtrOutput
	ToStreamSourceExternalPtrOutputWithContext(context.Context) StreamSourceExternalPtrOutput
}

type streamSourceExternalPtrType StreamSourceExternalArgs

func StreamSourceExternalPtr(v *StreamSourceExternalArgs) StreamSourceExternalPtrInput {
	return (*streamSourceExternalPtrType)(v)
}

func (*streamSourceExternalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceExternal)(nil)).Elem()
}

func (i *streamSourceExternalPtrType) ToStreamSourceExternalPtrOutput() StreamSourceExternalPtrOutput {
	return i.ToStreamSourceExternalPtrOutputWithContext(context.Background())
}

func (i *streamSourceExternalPtrType) ToStreamSourceExternalPtrOutputWithContext(ctx context.Context) StreamSourceExternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceExternalPtrOutput)
}

type StreamSourceExternalOutput struct{ *pulumi.OutputState }

func (StreamSourceExternalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceExternal)(nil)).Elem()
}

func (o StreamSourceExternalOutput) ToStreamSourceExternalOutput() StreamSourceExternalOutput {
	return o
}

func (o StreamSourceExternalOutput) ToStreamSourceExternalOutputWithContext(ctx context.Context) StreamSourceExternalOutput {
	return o
}

func (o StreamSourceExternalOutput) ToStreamSourceExternalPtrOutput() StreamSourceExternalPtrOutput {
	return o.ToStreamSourceExternalPtrOutputWithContext(context.Background())
}

func (o StreamSourceExternalOutput) ToStreamSourceExternalPtrOutputWithContext(ctx context.Context) StreamSourceExternalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSourceExternal) *StreamSourceExternal {
		return &v
	}).(StreamSourceExternalPtrOutput)
}

// The subject prefix for the remote API
func (o StreamSourceExternalOutput) Api() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceExternal) *string { return v.Api }).(pulumi.StringPtrOutput)
}

// The subject prefix where messages will be delivered to
func (o StreamSourceExternalOutput) Deliver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamSourceExternal) *string { return v.Deliver }).(pulumi.StringPtrOutput)
}

type StreamSourceExternalPtrOutput struct{ *pulumi.OutputState }

func (StreamSourceExternalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSourceExternal)(nil)).Elem()
}

func (o StreamSourceExternalPtrOutput) ToStreamSourceExternalPtrOutput() StreamSourceExternalPtrOutput {
	return o
}

func (o StreamSourceExternalPtrOutput) ToStreamSourceExternalPtrOutputWithContext(ctx context.Context) StreamSourceExternalPtrOutput {
	return o
}

func (o StreamSourceExternalPtrOutput) Elem() StreamSourceExternalOutput {
	return o.ApplyT(func(v *StreamSourceExternal) StreamSourceExternal {
		if v != nil {
			return *v
		}
		var ret StreamSourceExternal
		return ret
	}).(StreamSourceExternalOutput)
}

// The subject prefix for the remote API
func (o StreamSourceExternalPtrOutput) Api() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSourceExternal) *string {
		if v == nil {
			return nil
		}
		return v.Api
	}).(pulumi.StringPtrOutput)
}

// The subject prefix where messages will be delivered to
func (o StreamSourceExternalPtrOutput) Deliver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSourceExternal) *string {
		if v == nil {
			return nil
		}
		return v.Deliver
	}).(pulumi.StringPtrOutput)
}

type StreamSourceSubjectTransform struct {
	// The subject transform destination
	Destination string `pulumi:"destination"`
	// The subject transform source
	Source string `pulumi:"source"`
}

// StreamSourceSubjectTransformInput is an input type that accepts StreamSourceSubjectTransformArgs and StreamSourceSubjectTransformOutput values.
// You can construct a concrete instance of `StreamSourceSubjectTransformInput` via:
//
//	StreamSourceSubjectTransformArgs{...}
type StreamSourceSubjectTransformInput interface {
	pulumi.Input

	ToStreamSourceSubjectTransformOutput() StreamSourceSubjectTransformOutput
	ToStreamSourceSubjectTransformOutputWithContext(context.Context) StreamSourceSubjectTransformOutput
}

type StreamSourceSubjectTransformArgs struct {
	// The subject transform destination
	Destination pulumi.StringInput `pulumi:"destination"`
	// The subject transform source
	Source pulumi.StringInput `pulumi:"source"`
}

func (StreamSourceSubjectTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceSubjectTransform)(nil)).Elem()
}

func (i StreamSourceSubjectTransformArgs) ToStreamSourceSubjectTransformOutput() StreamSourceSubjectTransformOutput {
	return i.ToStreamSourceSubjectTransformOutputWithContext(context.Background())
}

func (i StreamSourceSubjectTransformArgs) ToStreamSourceSubjectTransformOutputWithContext(ctx context.Context) StreamSourceSubjectTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceSubjectTransformOutput)
}

// StreamSourceSubjectTransformArrayInput is an input type that accepts StreamSourceSubjectTransformArray and StreamSourceSubjectTransformArrayOutput values.
// You can construct a concrete instance of `StreamSourceSubjectTransformArrayInput` via:
//
//	StreamSourceSubjectTransformArray{ StreamSourceSubjectTransformArgs{...} }
type StreamSourceSubjectTransformArrayInput interface {
	pulumi.Input

	ToStreamSourceSubjectTransformArrayOutput() StreamSourceSubjectTransformArrayOutput
	ToStreamSourceSubjectTransformArrayOutputWithContext(context.Context) StreamSourceSubjectTransformArrayOutput
}

type StreamSourceSubjectTransformArray []StreamSourceSubjectTransformInput

func (StreamSourceSubjectTransformArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceSubjectTransform)(nil)).Elem()
}

func (i StreamSourceSubjectTransformArray) ToStreamSourceSubjectTransformArrayOutput() StreamSourceSubjectTransformArrayOutput {
	return i.ToStreamSourceSubjectTransformArrayOutputWithContext(context.Background())
}

func (i StreamSourceSubjectTransformArray) ToStreamSourceSubjectTransformArrayOutputWithContext(ctx context.Context) StreamSourceSubjectTransformArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSourceSubjectTransformArrayOutput)
}

type StreamSourceSubjectTransformOutput struct{ *pulumi.OutputState }

func (StreamSourceSubjectTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSourceSubjectTransform)(nil)).Elem()
}

func (o StreamSourceSubjectTransformOutput) ToStreamSourceSubjectTransformOutput() StreamSourceSubjectTransformOutput {
	return o
}

func (o StreamSourceSubjectTransformOutput) ToStreamSourceSubjectTransformOutputWithContext(ctx context.Context) StreamSourceSubjectTransformOutput {
	return o
}

// The subject transform destination
func (o StreamSourceSubjectTransformOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceSubjectTransform) string { return v.Destination }).(pulumi.StringOutput)
}

// The subject transform source
func (o StreamSourceSubjectTransformOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSourceSubjectTransform) string { return v.Source }).(pulumi.StringOutput)
}

type StreamSourceSubjectTransformArrayOutput struct{ *pulumi.OutputState }

func (StreamSourceSubjectTransformArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamSourceSubjectTransform)(nil)).Elem()
}

func (o StreamSourceSubjectTransformArrayOutput) ToStreamSourceSubjectTransformArrayOutput() StreamSourceSubjectTransformArrayOutput {
	return o
}

func (o StreamSourceSubjectTransformArrayOutput) ToStreamSourceSubjectTransformArrayOutputWithContext(ctx context.Context) StreamSourceSubjectTransformArrayOutput {
	return o
}

func (o StreamSourceSubjectTransformArrayOutput) Index(i pulumi.IntInput) StreamSourceSubjectTransformOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamSourceSubjectTransform {
		return vs[0].([]StreamSourceSubjectTransform)[vs[1].(int)]
	}).(StreamSourceSubjectTransformOutput)
}

type StreamSubjectTransform struct {
	// The subject transform destination
	Destination string `pulumi:"destination"`
	// The subject transform source
	Source string `pulumi:"source"`
}

// StreamSubjectTransformInput is an input type that accepts StreamSubjectTransformArgs and StreamSubjectTransformOutput values.
// You can construct a concrete instance of `StreamSubjectTransformInput` via:
//
//	StreamSubjectTransformArgs{...}
type StreamSubjectTransformInput interface {
	pulumi.Input

	ToStreamSubjectTransformOutput() StreamSubjectTransformOutput
	ToStreamSubjectTransformOutputWithContext(context.Context) StreamSubjectTransformOutput
}

type StreamSubjectTransformArgs struct {
	// The subject transform destination
	Destination pulumi.StringInput `pulumi:"destination"`
	// The subject transform source
	Source pulumi.StringInput `pulumi:"source"`
}

func (StreamSubjectTransformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSubjectTransform)(nil)).Elem()
}

func (i StreamSubjectTransformArgs) ToStreamSubjectTransformOutput() StreamSubjectTransformOutput {
	return i.ToStreamSubjectTransformOutputWithContext(context.Background())
}

func (i StreamSubjectTransformArgs) ToStreamSubjectTransformOutputWithContext(ctx context.Context) StreamSubjectTransformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSubjectTransformOutput)
}

func (i StreamSubjectTransformArgs) ToStreamSubjectTransformPtrOutput() StreamSubjectTransformPtrOutput {
	return i.ToStreamSubjectTransformPtrOutputWithContext(context.Background())
}

func (i StreamSubjectTransformArgs) ToStreamSubjectTransformPtrOutputWithContext(ctx context.Context) StreamSubjectTransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSubjectTransformOutput).ToStreamSubjectTransformPtrOutputWithContext(ctx)
}

// StreamSubjectTransformPtrInput is an input type that accepts StreamSubjectTransformArgs, StreamSubjectTransformPtr and StreamSubjectTransformPtrOutput values.
// You can construct a concrete instance of `StreamSubjectTransformPtrInput` via:
//
//	        StreamSubjectTransformArgs{...}
//
//	or:
//
//	        nil
type StreamSubjectTransformPtrInput interface {
	pulumi.Input

	ToStreamSubjectTransformPtrOutput() StreamSubjectTransformPtrOutput
	ToStreamSubjectTransformPtrOutputWithContext(context.Context) StreamSubjectTransformPtrOutput
}

type streamSubjectTransformPtrType StreamSubjectTransformArgs

func StreamSubjectTransformPtr(v *StreamSubjectTransformArgs) StreamSubjectTransformPtrInput {
	return (*streamSubjectTransformPtrType)(v)
}

func (*streamSubjectTransformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSubjectTransform)(nil)).Elem()
}

func (i *streamSubjectTransformPtrType) ToStreamSubjectTransformPtrOutput() StreamSubjectTransformPtrOutput {
	return i.ToStreamSubjectTransformPtrOutputWithContext(context.Background())
}

func (i *streamSubjectTransformPtrType) ToStreamSubjectTransformPtrOutputWithContext(ctx context.Context) StreamSubjectTransformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamSubjectTransformPtrOutput)
}

type StreamSubjectTransformOutput struct{ *pulumi.OutputState }

func (StreamSubjectTransformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamSubjectTransform)(nil)).Elem()
}

func (o StreamSubjectTransformOutput) ToStreamSubjectTransformOutput() StreamSubjectTransformOutput {
	return o
}

func (o StreamSubjectTransformOutput) ToStreamSubjectTransformOutputWithContext(ctx context.Context) StreamSubjectTransformOutput {
	return o
}

func (o StreamSubjectTransformOutput) ToStreamSubjectTransformPtrOutput() StreamSubjectTransformPtrOutput {
	return o.ToStreamSubjectTransformPtrOutputWithContext(context.Background())
}

func (o StreamSubjectTransformOutput) ToStreamSubjectTransformPtrOutputWithContext(ctx context.Context) StreamSubjectTransformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StreamSubjectTransform) *StreamSubjectTransform {
		return &v
	}).(StreamSubjectTransformPtrOutput)
}

// The subject transform destination
func (o StreamSubjectTransformOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSubjectTransform) string { return v.Destination }).(pulumi.StringOutput)
}

// The subject transform source
func (o StreamSubjectTransformOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v StreamSubjectTransform) string { return v.Source }).(pulumi.StringOutput)
}

type StreamSubjectTransformPtrOutput struct{ *pulumi.OutputState }

func (StreamSubjectTransformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamSubjectTransform)(nil)).Elem()
}

func (o StreamSubjectTransformPtrOutput) ToStreamSubjectTransformPtrOutput() StreamSubjectTransformPtrOutput {
	return o
}

func (o StreamSubjectTransformPtrOutput) ToStreamSubjectTransformPtrOutputWithContext(ctx context.Context) StreamSubjectTransformPtrOutput {
	return o
}

func (o StreamSubjectTransformPtrOutput) Elem() StreamSubjectTransformOutput {
	return o.ApplyT(func(v *StreamSubjectTransform) StreamSubjectTransform {
		if v != nil {
			return *v
		}
		var ret StreamSubjectTransform
		return ret
	}).(StreamSubjectTransformOutput)
}

// The subject transform destination
func (o StreamSubjectTransformPtrOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSubjectTransform) *string {
		if v == nil {
			return nil
		}
		return &v.Destination
	}).(pulumi.StringPtrOutput)
}

// The subject transform source
func (o StreamSubjectTransformPtrOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamSubjectTransform) *string {
		if v == nil {
			return nil
		}
		return &v.Source
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderTlsInput)(nil)).Elem(), ProviderTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderTlsPtrInput)(nil)).Elem(), ProviderTlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMirrorInput)(nil)).Elem(), StreamMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMirrorPtrInput)(nil)).Elem(), StreamMirrorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMirrorExternalInput)(nil)).Elem(), StreamMirrorExternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMirrorExternalPtrInput)(nil)).Elem(), StreamMirrorExternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMirrorSubjectTransformInput)(nil)).Elem(), StreamMirrorSubjectTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMirrorSubjectTransformArrayInput)(nil)).Elem(), StreamMirrorSubjectTransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceInput)(nil)).Elem(), StreamSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceArrayInput)(nil)).Elem(), StreamSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceExternalInput)(nil)).Elem(), StreamSourceExternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceExternalPtrInput)(nil)).Elem(), StreamSourceExternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceSubjectTransformInput)(nil)).Elem(), StreamSourceSubjectTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSourceSubjectTransformArrayInput)(nil)).Elem(), StreamSourceSubjectTransformArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSubjectTransformInput)(nil)).Elem(), StreamSubjectTransformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamSubjectTransformPtrInput)(nil)).Elem(), StreamSubjectTransformArgs{})
	pulumi.RegisterOutputType(ProviderTlsOutput{})
	pulumi.RegisterOutputType(ProviderTlsPtrOutput{})
	pulumi.RegisterOutputType(StreamMirrorOutput{})
	pulumi.RegisterOutputType(StreamMirrorPtrOutput{})
	pulumi.RegisterOutputType(StreamMirrorExternalOutput{})
	pulumi.RegisterOutputType(StreamMirrorExternalPtrOutput{})
	pulumi.RegisterOutputType(StreamMirrorSubjectTransformOutput{})
	pulumi.RegisterOutputType(StreamMirrorSubjectTransformArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceOutput{})
	pulumi.RegisterOutputType(StreamSourceArrayOutput{})
	pulumi.RegisterOutputType(StreamSourceExternalOutput{})
	pulumi.RegisterOutputType(StreamSourceExternalPtrOutput{})
	pulumi.RegisterOutputType(StreamSourceSubjectTransformOutput{})
	pulumi.RegisterOutputType(StreamSourceSubjectTransformArrayOutput{})
	pulumi.RegisterOutputType(StreamSubjectTransformOutput{})
	pulumi.RegisterOutputType(StreamSubjectTransformPtrOutput{})
}
