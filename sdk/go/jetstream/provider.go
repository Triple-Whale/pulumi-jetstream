// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jetstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/Triple-Whale/pulumi-jetstream/sdk/go/jetstream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the jetstream package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The contents of the NATS 2.0 Credentials file to use
	CredentialData pulumi.StringPtrOutput `pulumi:"credentialData"`
	// Path to the NATS 2.0 credentials file to use for authentication
	Credentials pulumi.StringPtrOutput `pulumi:"credentials"`
	// Connect using a NKEY seed stored in a file
	Nkey pulumi.StringPtrOutput `pulumi:"nkey"`
	// Connect using a password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Comma separated list of NATS servers to connect to
	Servers pulumi.StringOutput `pulumi:"servers"`
	// Connect using an username, used as token when no password is given
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:jetstream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The contents of the NATS 2.0 Credentials file to use
	CredentialData *string `pulumi:"credentialData"`
	// Path to the NATS 2.0 credentials file to use for authentication
	Credentials *string `pulumi:"credentials"`
	// Connect using a NKEY seed stored in a file
	Nkey *string `pulumi:"nkey"`
	// Connect using a password
	Password *string `pulumi:"password"`
	// Comma separated list of NATS servers to connect to
	Servers string       `pulumi:"servers"`
	Tls     *ProviderTls `pulumi:"tls"`
	// Connect using an username, used as token when no password is given
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The contents of the NATS 2.0 Credentials file to use
	CredentialData pulumi.StringPtrInput
	// Path to the NATS 2.0 credentials file to use for authentication
	Credentials pulumi.StringPtrInput
	// Connect using a NKEY seed stored in a file
	Nkey pulumi.StringPtrInput
	// Connect using a password
	Password pulumi.StringPtrInput
	// Comma separated list of NATS servers to connect to
	Servers pulumi.StringInput
	Tls     ProviderTlsPtrInput
	// Connect using an username, used as token when no password is given
	User pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The contents of the NATS 2.0 Credentials file to use
func (o ProviderOutput) CredentialData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CredentialData }).(pulumi.StringPtrOutput)
}

// Path to the NATS 2.0 credentials file to use for authentication
func (o ProviderOutput) Credentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Credentials }).(pulumi.StringPtrOutput)
}

// Connect using a NKEY seed stored in a file
func (o ProviderOutput) Nkey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Nkey }).(pulumi.StringPtrOutput)
}

// Connect using a password
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Comma separated list of NATS servers to connect to
func (o ProviderOutput) Servers() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Servers }).(pulumi.StringOutput)
}

// Connect using an username, used as token when no password is given
func (o ProviderOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
