// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package jetstream

import (
	"context"
	"reflect"

	"errors"
	"github.com/Triple-Whale/pulumi-jetstream/sdk/go/jetstream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KvEntry struct {
	pulumi.CustomResourceState

	// The name of the bucket
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The key of the entry
	Key pulumi.StringOutput `pulumi:"key"`
	// The revision of the entry
	Revision pulumi.IntOutput `pulumi:"revision"`
	// The value of the entry
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewKvEntry registers a new resource with the given unique name, arguments, and options.
func NewKvEntry(ctx *pulumi.Context,
	name string, args *KvEntryArgs, opts ...pulumi.ResourceOption) (*KvEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KvEntry
	err := ctx.RegisterResource("jetstream:index/kvEntry:KvEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKvEntry gets an existing KvEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKvEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KvEntryState, opts ...pulumi.ResourceOption) (*KvEntry, error) {
	var resource KvEntry
	err := ctx.ReadResource("jetstream:index/kvEntry:KvEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KvEntry resources.
type kvEntryState struct {
	// The name of the bucket
	Bucket *string `pulumi:"bucket"`
	// The key of the entry
	Key *string `pulumi:"key"`
	// The revision of the entry
	Revision *int `pulumi:"revision"`
	// The value of the entry
	Value *string `pulumi:"value"`
}

type KvEntryState struct {
	// The name of the bucket
	Bucket pulumi.StringPtrInput
	// The key of the entry
	Key pulumi.StringPtrInput
	// The revision of the entry
	Revision pulumi.IntPtrInput
	// The value of the entry
	Value pulumi.StringPtrInput
}

func (KvEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*kvEntryState)(nil)).Elem()
}

type kvEntryArgs struct {
	// The name of the bucket
	Bucket string `pulumi:"bucket"`
	// The key of the entry
	Key string `pulumi:"key"`
	// The value of the entry
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a KvEntry resource.
type KvEntryArgs struct {
	// The name of the bucket
	Bucket pulumi.StringInput
	// The key of the entry
	Key pulumi.StringInput
	// The value of the entry
	Value pulumi.StringInput
}

func (KvEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kvEntryArgs)(nil)).Elem()
}

type KvEntryInput interface {
	pulumi.Input

	ToKvEntryOutput() KvEntryOutput
	ToKvEntryOutputWithContext(ctx context.Context) KvEntryOutput
}

func (*KvEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**KvEntry)(nil)).Elem()
}

func (i *KvEntry) ToKvEntryOutput() KvEntryOutput {
	return i.ToKvEntryOutputWithContext(context.Background())
}

func (i *KvEntry) ToKvEntryOutputWithContext(ctx context.Context) KvEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KvEntryOutput)
}

// KvEntryArrayInput is an input type that accepts KvEntryArray and KvEntryArrayOutput values.
// You can construct a concrete instance of `KvEntryArrayInput` via:
//
//	KvEntryArray{ KvEntryArgs{...} }
type KvEntryArrayInput interface {
	pulumi.Input

	ToKvEntryArrayOutput() KvEntryArrayOutput
	ToKvEntryArrayOutputWithContext(context.Context) KvEntryArrayOutput
}

type KvEntryArray []KvEntryInput

func (KvEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KvEntry)(nil)).Elem()
}

func (i KvEntryArray) ToKvEntryArrayOutput() KvEntryArrayOutput {
	return i.ToKvEntryArrayOutputWithContext(context.Background())
}

func (i KvEntryArray) ToKvEntryArrayOutputWithContext(ctx context.Context) KvEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KvEntryArrayOutput)
}

// KvEntryMapInput is an input type that accepts KvEntryMap and KvEntryMapOutput values.
// You can construct a concrete instance of `KvEntryMapInput` via:
//
//	KvEntryMap{ "key": KvEntryArgs{...} }
type KvEntryMapInput interface {
	pulumi.Input

	ToKvEntryMapOutput() KvEntryMapOutput
	ToKvEntryMapOutputWithContext(context.Context) KvEntryMapOutput
}

type KvEntryMap map[string]KvEntryInput

func (KvEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KvEntry)(nil)).Elem()
}

func (i KvEntryMap) ToKvEntryMapOutput() KvEntryMapOutput {
	return i.ToKvEntryMapOutputWithContext(context.Background())
}

func (i KvEntryMap) ToKvEntryMapOutputWithContext(ctx context.Context) KvEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KvEntryMapOutput)
}

type KvEntryOutput struct{ *pulumi.OutputState }

func (KvEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KvEntry)(nil)).Elem()
}

func (o KvEntryOutput) ToKvEntryOutput() KvEntryOutput {
	return o
}

func (o KvEntryOutput) ToKvEntryOutputWithContext(ctx context.Context) KvEntryOutput {
	return o
}

// The name of the bucket
func (o KvEntryOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *KvEntry) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The key of the entry
func (o KvEntryOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *KvEntry) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The revision of the entry
func (o KvEntryOutput) Revision() pulumi.IntOutput {
	return o.ApplyT(func(v *KvEntry) pulumi.IntOutput { return v.Revision }).(pulumi.IntOutput)
}

// The value of the entry
func (o KvEntryOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *KvEntry) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type KvEntryArrayOutput struct{ *pulumi.OutputState }

func (KvEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KvEntry)(nil)).Elem()
}

func (o KvEntryArrayOutput) ToKvEntryArrayOutput() KvEntryArrayOutput {
	return o
}

func (o KvEntryArrayOutput) ToKvEntryArrayOutputWithContext(ctx context.Context) KvEntryArrayOutput {
	return o
}

func (o KvEntryArrayOutput) Index(i pulumi.IntInput) KvEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KvEntry {
		return vs[0].([]*KvEntry)[vs[1].(int)]
	}).(KvEntryOutput)
}

type KvEntryMapOutput struct{ *pulumi.OutputState }

func (KvEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KvEntry)(nil)).Elem()
}

func (o KvEntryMapOutput) ToKvEntryMapOutput() KvEntryMapOutput {
	return o
}

func (o KvEntryMapOutput) ToKvEntryMapOutputWithContext(ctx context.Context) KvEntryMapOutput {
	return o
}

func (o KvEntryMapOutput) MapIndex(k pulumi.StringInput) KvEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KvEntry {
		return vs[0].(map[string]*KvEntry)[vs[1].(string)]
	}).(KvEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KvEntryInput)(nil)).Elem(), &KvEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*KvEntryArrayInput)(nil)).Elem(), KvEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KvEntryMapInput)(nil)).Elem(), KvEntryMap{})
	pulumi.RegisterOutputType(KvEntryOutput{})
	pulumi.RegisterOutputType(KvEntryArrayOutput{})
	pulumi.RegisterOutputType(KvEntryMapOutput{})
}
